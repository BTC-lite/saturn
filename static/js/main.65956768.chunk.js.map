{"version":3,"sources":["actions/ConnectNetwork.js","actions/SetActiveAccount.js","actions/WatchNetworkChanges.js","actions/WatchAccountChanges.js","utils/Web3Util.js","config.js","actions/FetchOrders.js","actions/FetchTrades.js","actions/RegisterToken.js","utils/MiscUtil.js","actions/ExecuteOrder.js","actions/CreateOrder.js","actions/FetchOrder.js","actions/FetchTxReceipt.js","actions/FetchLeaderboard.js","utils/TokenUtil.js","utils/Utils.js","components/Orderbook/CreateOrderForm.js","components/Shared/InstallWallet.js","components/Shared/LoginToWallet.js","components/Shared/NullBalance.js","components/Shared/WrongNetwork.js","utils/Helpers.js","components/Shared/ERC20Approval.js","components/Orderbook/CreateOrderModal.js","components/Orderbook/ExecuteOrderForm.js","components/Orderbook/ExecuteOrderModal.js","utils/ExchangeUtil.js","components/Orderbook/Table.js","components/OrderBook.js","actions/CancelOrder.js","components/Shared/Hashicon.js","components/Trades/Table.js","components/Trades.js","components/Leaderboard/Table.js","components/Leaderboard.js","Fenrir.js","reducers/NetworkReducer.js","reducers/ExchangeReducer.js","reducers/OrderBookReducer.js","store.js","index.js"],"names":["web3","window","connectNetwork","dispatch","index","Web3","currentProvider","type","payload","getState","network","setInterval","a","blockchain","web3Util","blockNumber","networkId","networkName","relevantKeys","oldData","_","pick","isEmpty","isMatch","currentTime","watchAccountChanges","activeAccountAddress","interval","candidate","clearInterval","getBlockNumber","Promise","resolve","eth","error","getNetworkId","reject","version","toString","getTimestamp","getBlock","result","timestamp","getAccount","getAccounts","accounts","getBalanceInEther","address","getBalance","fromWei","toNumber","tokenABI","JSON","parse","contract","at","balanceOf","call","value","BigNumber","Number","prototype","noExponents","data","String","this","split","length","z","sign","str","replace","mag","TOKEN_ADDRESS","TOKEN_LOGO","EXCHANGE_CONTRACT","EXCHANGE_CONTRACT_ABI","ETHER_ADDRESS","ERC223_TOKEN_ABI","ERC20_TOKEN_ABI","fetchSaturnApi","networkSymbol","tokenAddress","fetch","then","response","json","responseData","registerToken","exchangeAddress","totalSupply","supply","notificationAction","Notifications","show","title","message","level","position","autoDismiss","dismissible","approve","sendTransaction","from","transaction","checkCoinAllowance","allowance","allowanceBalance","makeuint","number","hexnum","_extend","utils","toHex","substring","padLeft","takeOrderPayload","orderId","miscUtil","createERC223OrderPayload","priceMul","priceDiv","buytoken","paddedToken","toUint","toFixed","num","padStart","hexlify","toSuitableBigNumber","n","BigNumberJS","bigNumberify","integerValue","ROUND_DOWN","valueOf","e","tmp","txHash","fetchTxReceiptByTransactionHash","transactionHash","start","end","handleTotalPrice","price","amount","bdPrice","bdAmount","times","handleTotalAmount","total","div","handleTotalPriceAfterFees","fees","bdFees","minus","numbro","require","CreateOrderForm","props","state","orderType","orderAmount","totalAmount","pricePerUnit","errorMessage","txReceipt","handleAmountChange","debounce","handlePriceChange","setState","recalculateErrors","createOrderErc20","createOrderErc223","ethereumBalance","etherBalance","tokenBalance","checkTxStatus","loadTransactionData","bind","targetTokenBestBuyPrice","bestBuyPrice","targetTokenBestSellPrice","bestSellPrice","targetTokenBalance","transactionSigned","className","onClick","selectOrderType","id","name","defaultChecked","htmlFor","icon","faExchangeAlt","size","color","faBalanceScale","toUpperCase","InputGroup","thousandSeparator","allowNegative","decimalScale","onChange","event","target","src","alt","height","width","disabled","faTimesCircle","signTransaction","fontSize","beat","href","rel","displayType","blocknumber","gasused","txprice","resetOrder","Component","InstallWallet","align","LoginToWallet","NullBalance","WrongNetwork","TOKEN_NETWORK","handleExplorerForTx","handleExplorerForAddress","ERC20Approval","approvalPending","preventDefault","CreateOrderModal","erc20ApprovalRequired","fetchAccountBalances","loadDynamicData","formattedTokenBalance","setApprovalFlag","loadAccountBalance","tokenAllowance","isConnected","nullBalance","wrongNetwork","ordersData","orders","undefined","isSync","buys","Math","min","apply","map","x","sells","max","mapActionCreators","tradeAmount","buyTokenAddress","sellTokenAddress","exchangeContract","tokenContract","shiftedBy","sellEther","toWei","tradedAmount","sellERC20Token","transfer","connect","orderBook","OrderForm","buyToken","sellToken","etherAmount","totalFees","tradeMining","orderBalanceError","walletBalanceError","etherInputActive","tokenInputActive","orderBlockchain","tokenSupply","remainingAmountBalance","calculateEthereumPrefill","percentage","selectedOrder","orderBalance","balance","desiredTokenAmount","availableInEther","desiredEtherAmount","executeTransaction","buyTokenName","buyTokenDecimals","order_id","orderContract","executeOrder","amountValue","enteredAmount","calculateFees","tradeMiningAmount","desiredAmount","getBuyTokenAmount","totalAmountToBuy","totalAmountToBuyString","feesFromWei","totalFromWei","calculateFeesToken","totalPrice","setTokensData","selltoken","rawPrice","symbol","persist","rotation","faInfoCircle","ExecuteOrderModal","fetchOrder","prevProps","orderData","orderStatus","active","trades","ExecuteOrderForm","remainingAmount","exchange","isOrderActive","exchangeContractAddress","amountToWei","calcFees","tokenDecimals","miningAmount","decimals","tokenStandard","tokenName","action","estimateGas","gasAmount","gas","buyOrderWithERC20Token","buyOrderWithEth","Table","cancelOrder","tableType","columns","dataField","text","hidden","formatter","cellContent","row","sort","isDummyField","data-toggle","data-target","format","thousandSeparated","trimMantissa","mantissa","sortFunc","b","order","rowA","rowB","fixedDecimalScale","owner","signCancelOrderTransaction","defaultSorted","pagination","paginationFactory","custom","sizePerPage","totalSize","paginationTotalRenderer","to","paginationProps","paginationTableProps","keyField","classes","striped","hover","noDataIndication","tabIndex","data-dismiss","aria-label","faTimes","OrderBook","fetchOrders","fetchOrderBookdData","sellOrdersData","buyOrdersData","concat","Row","Col","md","lg","faPlusSquare","tokenOrderBook","Hashicon","hash","refs","appendChild","hashicon","style","ref","React","tradesData","created_at","headerClasses","moment","unix","order_type","buyer","seller","buytokenamount","selltokenamount","bordered","Trades","fetchTrades","fetchTradesData","leaderboardEnabled","combinedTradesData","tokenTrades","leaderboardData","trademiners","push","Leaderboard","fetchLeaderboard","fetchLeaderboardData","leaderboard","Fenrir","Navbar","NavbarBrand","Media","NavLink","faGithub","Container","notifications","initialState","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65956768.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { setActiveAccount } from './SetActiveAccount'\n\nimport {\n  watchAccountChanges,\n  watchNetworkChanges\n} from '.'\n\nexport const CONNECT_NETWORK = 'network/CONNECT_NETWORK'\nlet web3 = window.web3\n\nexport function connectNetwork () {\n  return function (dispatch) {\n    if (typeof web3 !== 'undefined') {\n      window.web3 = new Web3(web3.currentProvider)\n    }\n\n    if (web3) {\n      dispatch({\n        type: CONNECT_NETWORK,\n        payload: web3\n      })\n\n      dispatch(watchNetworkChanges())\n      dispatch(setActiveAccount(0))\n      dispatch(watchAccountChanges())\n    }\n  }\n}\n","export const SET_ACTIVE_ACCOUNT = 'network/SET_ACTIVE_ACCOUNT'\n\nexport function setActiveAccount(index) {\n  return function(dispatch, getState) {\n    dispatch({\n      type: SET_ACTIVE_ACCOUNT,\n      payload: index\n    })\n  }\n}\n","import * as web3Util from '../utils/Web3Util'\nimport _ from 'lodash'\nexport const UPDATE_NETWORK = 'network/UPDATE_NETWORK'\n\nexport function watchNetworkChanges () {\n  return function (dispatch, getState) {\n    const web3 = getState().network.web3\n\n    if (web3) {\n      setInterval(async () => {\n        let blockchain = {}\n\n        blockchain.blockNumber = await web3Util.getBlockNumber(web3)\n        blockchain.networkId = await web3Util.getNetworkId(web3)\n\n        if (blockchain.networkId) {\n          if (blockchain.networkId === '1') blockchain.networkName = 'mainnet'\n          else if (blockchain.networkId === '61') blockchain.networkName = 'classic'\n          else blockchain.networkName = 'testrpc'\n        }\n\n        let relevantKeys = ['blockNumber', 'networkId']\n\n        let oldData = _.pick(getState().network, relevantKeys)\n        let changed = _.isEmpty(oldData) || !_.isMatch(blockchain, oldData)\n        if (!changed) return\n\n        blockchain.currentTime = await web3Util.getTimestamp(web3)\n\n        dispatch({\n          type: UPDATE_NETWORK,\n          payload: blockchain\n        })\n      }, 2500)\n    }\n  }\n}\n","import {\n  SET_ACTIVE_ACCOUNT\n} from './SetActiveAccount'\n\nimport * as web3Util from '../utils/Web3Util'\n\nexport function watchAccountChanges() {\n  return function(dispatch, getState) {\n    let web3 = getState().network.web3\n    let activeAccountAddress = getState().network.activeAccountAddress\n\n    let interval = setInterval(async () => {\n      if (!web3) return\n\n      let candidate = await web3Util.getAccount(web3)\n\n      if (activeAccountAddress !== candidate) {\n        clearInterval(interval);\n        dispatch({\n          type: SET_ACTIVE_ACCOUNT,\n          payload: candidate\n        })\n        dispatch(watchAccountChanges())\n      }\n    }, 2500)\n  }\n}\n","import { Big } from 'big.js'\nimport { BigNumber } from 'bignumber.js'\n\nNumber.prototype.noExponents = function () {\n  var data = String(this).split(/[eE]/)\n  if (data.length == 1) return data[0]\n\n  var z = \"\", sign = this < 0 ? \"-\" : \"\",\n    str = data[0].replace(\".\", \"\"),\n    mag = Number(data[1]) + 1\n\n  if (mag < 0) {\n    z = sign + \"0.\"\n    while (mag++) z += \"0\"\n    return z + str.replace(/^\\-/, \"\")\n  }\n\n  mag -= str.length\n  while (mag--) z += \"0\"\n  return str + z\n}\n\nexport function getBlockNumber(web3) {\n  return new Promise(resolve => {\n    web3.eth.getBlockNumber((error, blockNumber) => {\n      resolve(blockNumber)\n    })\n  })\n}\n\nexport function getNetworkId(web3) {\n  return new Promise((resolve, reject) => {\n    resolve(web3.version.network.toString())\n  })\n}\n\nexport function getTimestamp(web3) {\n  return new Promise(async resolve => {\n    let blockNumber = await getBlockNumber(web3)\n    web3.eth.getBlock(blockNumber, function(error, result) {\n      if (result) {\n        resolve(result.timestamp)\n      }\n    })\n  })\n}\n\nexport function getAccount(web3) {\n  return new Promise(async resolve => {\n    web3.eth.getAccounts(function (error, accounts) {\n      resolve(accounts[0])\n    })\n  })\n}\n\nexport function convertEthereumBalance(web3, ethereumBalance, activeAccountAddress) {\n  return web3.fromWei(Number(ethereumBalance[activeAccountAddress]), \"ether\")\n}\n\nexport function convertTokenBalance(web3, tokenBalance, activeAccountAddress, tokenAddress, tokenDecimals) {\n  let tokenWalletBalance = new Big(Number(tokenBalance[activeAccountAddress]))\n\n  return tokenWalletBalance.div(10 ** tokenDecimals)\n}\n\nexport async function isERC223(web3, contractAddress) {\n  return new Promise(async resolve => {\n    await web3.eth.getCode(contractAddress, function(error, result) {\n      if (result) {\n        let hash = \"be45fd62\"\n        resolve(result.indexOf(hash.slice(2, hash.length)) > 0)\n      }\n    })\n  })\n}\n\nexport async function isERC20(web3, contractAddress) {\n  return new Promise(async resolve => {\n    await web3.eth.getCode(contractAddress, function(error, result) {\n      if (result) {\n        let hash = \"095ea7b3\"\n        resolve(result.indexOf(hash.slice(2, hash.length)) > 0)\n      }\n    })\n  })\n}\n\nexport function getBalanceInEther(address, web3) {\n  return new Promise(resolve => {\n    return web3.eth.getBalance(address, function(error, result) {\n      if(error) {\n        resolve(0)\n      }\n      else {\n        resolve(web3.fromWei(result.toNumber(), \"ether\"));\n      }\n    });\n  });\n}\n\nexport function getBalance(address, web3, activeAccountAddress) {\n  return new Promise(resolve => {\n    let tokenABI = JSON.parse('[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]')\n    let tokenContract = web3.eth.contract(tokenABI).at(address)\n\n    return tokenContract.balanceOf.call(activeAccountAddress, function (error, value) {\n      if (value) {\n        resolve(new BigNumber(value))\n      }\n    })\n  })\n}\n","// Token Info\n// ===============================================================\nexport const TOKEN_ADDRESS  = \"0x5acD19b9c91e596b1f062f18e3D02da7eD8D1e50\"\nexport const TOKEN_NETWORK  = \"ETH\"\nexport const TOKEN_NAME     = \"BTC Lite\"\nexport const TOKEN_SYMBOL   = \"BTCL\"\nexport const TOKEN_DECIMALS = 8\nexport const TOKEN_STANDARD = \"ERC20\"\nexport const TOKEN_LOGO     = \"token-logo.png\"\n\n\n// Header / Navigation\n// ===============================================================\nexport const NAV_BRAND_LOGO = \"logo-nav.png\"\nexport const NAV_BRAND      = \"Saturn Network\"\nexport const MAIN_TITLE     = \"Instant Swaps and Secure Trading\"\nexport const MAIN_TEXT      = \"Saturn Network is a DEX protocol that enables direct wallet to wallet exchanges, powering easy and secure token trading for any Ethereum asset.\"\n\n\n// Trading Competition / Leaderboard\n// ===============================================================\n// Use https://www.unixtimestamp.com/index.php or similar to set up Competition start / end dates\nexport const TRADING_COMPETITION_ENABLED    = true\nexport const TRADING_COMPETITION_STRATEGY   = \"mined\" // bought, sold, mined\nexport const TRADING_COMPETITION_START_DATE = 1590969600 // June 1\nexport const TRADING_COMPETITION_END_DATE   = 1596153600 // July 31\n\n\n// ===============================================================\n// DO NOT update constants below unless you know what you're doing\nexport const BLOCKCHAIN_LOGO            = (TOKEN_NETWORK === \"ETH\") ? \"eth.svg\" : \"etc.svg\"\nexport const TRADE_MINING_REWARD_LOGO   = (TOKEN_NETWORK === \"ETH\") ? \"rewards/saturn-reward.png\" : \"rewards/strn-reward.png\"\nexport const TRADE_MINING_REWARD_SYMBOL = (TOKEN_NETWORK === \"ETH\") ? \"SATURN\" : \"STRN\"\n\nexport const EXCHANGE_CONTRACT     = (TOKEN_NETWORK === \"ETH\") ? \"0xaA5bBD5A177A588b9F213505cA3740b444Dbd586\" : \"0x5ef83ab1155786f146c5a00722bef7ab683dc0de\"\nexport const EXCHANGE_CONTRACT_ABI = JSON.parse('[{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"priceMul\",\"type\":\"uint256\"},{\"name\":\"priceDiv\",\"type\":\"uint256\"},{\"name\":\"ring\",\"type\":\"address\"}],\"name\":\"sellERC20TokenWithRing\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMul\",\"type\":\"uint256\"},{\"name\":\"newDiv\",\"type\":\"uint256\"}],\"name\":\"changeTradeMiningPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeMul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeMiningMul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"calcFees\",\"outputs\":[{\"name\":\"fees\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"remainingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeDiv\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"buyOrderWithEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fees\",\"type\":\"uint256\"},{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"tradeMiningAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeMiningBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"priceMul\",\"type\":\"uint256\"},{\"name\":\"priceDiv\",\"type\":\"uint256\"}],\"name\":\"sellEther\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyOrderWithERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"isOrderActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"priceMul\",\"type\":\"uint256\"},{\"name\":\"priceDiv\",\"type\":\"uint256\"},{\"name\":\"ring\",\"type\":\"address\"}],\"name\":\"sellEtherWithRing\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"priceMul\",\"type\":\"uint256\"},{\"name\":\"priceDiv\",\"type\":\"uint256\"}],\"name\":\"sellERC20Token\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTradeMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeMiningDiv\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"desiredSellTokenAmount\",\"type\":\"uint256\"},{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getBuyTokenAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_saturnToken\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_feeMul\",\"type\":\"uint256\"},{\"name\":\"_feeDiv\",\"type\":\"uint256\"},{\"name\":\"_tradeMiningMul\",\"type\":\"uint256\"},{\"name\":\"_tradeMiningDiv\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ring\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceMul\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceDiv\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OrderFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"boughtTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Mined\",\"type\":\"event\"}]')\nexport const ETHER_ADDRESS = \"0x0000000000000000000000000000000000000000\"\n\nexport const ERC223_TOKEN_ABI = JSON.parse('[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"}]')\nexport const ERC20_TOKEN_ABI = JSON.parse('[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]')\n","import { ETHER_ADDRESS } from '../config'\n\nexport const CONNECT_TOKEN_ORDER_BOOK_DATA = 'saturn-api/CONNECT_TOKEN_ORDER_BOOK_DATA'\nexport const UPDATE_TOKEN_ORDER_BOOK_DATA = 'saturn-api/UPDATE_TOKEN_ORDER_BOOK_DATA'\n\nexport function fetchOrders (networkSymbol, tokenAddress) {\n  return async function(dispatch, getState) {\n    let orders = getState().orderBook.orders\n    let targetTokenOrderBookData = orders[`${tokenAddress}`]\n\n    if (targetTokenOrderBookData === undefined) {\n      targetTokenOrderBookData = { data: [], isSync: true}\n\n      dispatch({\n        type: CONNECT_TOKEN_ORDER_BOOK_DATA,\n        payload: targetTokenOrderBookData,\n        id: `${tokenAddress}`\n      })\n    }\n\n    fetchSaturnApi(networkSymbol, tokenAddress).then((tokenOrderBook) => {\n      if (tokenOrderBook !== []) {\n         targetTokenOrderBookData = { data: tokenOrderBook, isSync: false }\n\n          dispatch({\n            type: UPDATE_TOKEN_ORDER_BOOK_DATA,\n            payload: targetTokenOrderBookData,\n            id: `${tokenAddress}`\n          })\n        }\n      }\n    )\n  }\n}\n\nexport async function fetchSaturnApi(networkSymbol, tokenAddress) {\n  return await new Promise(resolve => {\n    fetch(`https://ticker.saturn.network/api/v2/orders/${networkSymbol}/${tokenAddress}/${ETHER_ADDRESS}/all.json`)\n      .then(function (response) {\n        return response.json()\n      })\n      .then(function (responseData) {\n        resolve(responseData)\n      })\n  })\n}\n","import { ETHER_ADDRESS } from '../config'\n\nexport const CONNECT_TOKEN_TRADES_DATA = 'saturn-api/CONNECT_TOKEN_TRADES_DATA'\nexport const UPDATE_TOKEN_TRADES_DATA = 'saturn-api/UPDATE_TOKEN_TRADES_DATA'\n\nexport function fetchTrades (networkSymbol, tokenAddress) {\n  return async function(dispatch, getState) {\n    let tradesData = getState().orderBook.trades\n\n    let targetTokenTradesData = tradesData[`${tokenAddress}`]\n\n    if (targetTokenTradesData === undefined) {\n      targetTokenTradesData = { data: [], isSync: true}\n\n      dispatch({\n        type: CONNECT_TOKEN_TRADES_DATA,\n        payload: targetTokenTradesData,\n        id: `${tokenAddress}`\n      })\n    }\n\n    fetchSaturnApi(networkSymbol, tokenAddress).then((tokenTrades) => {\n      if (tokenTrades !== []) {\n\n      targetTokenTradesData = { data: tokenTrades, isSync: false }\n\n          dispatch({\n            type: UPDATE_TOKEN_TRADES_DATA,\n            payload: targetTokenTradesData,\n            id: `${tokenAddress}`\n          })\n        }\n      }\n    )\n  }\n}\n\nexport async function fetchSaturnApi(networkSymbol, tokenAddress) {\n  return await new Promise(resolve => {\n    fetch(`https://ticker.saturn.network/api/v2/trades/${networkSymbol}/${tokenAddress}/${ETHER_ADDRESS}/100.json`)\n      .then(function (response) {\n        return response.json()\n      })\n      .then(function (responseData) {\n        resolve(responseData)\n      })\n  })\n}\n","import Notifications from 'react-notification-system-redux'\nimport { ERC20_TOKEN_ABI } from '../config'\n\nexport function registerToken (exchangeAddress, tokenAddress) {\n  return async function(dispatch, getState) {\n    let web3 = getState().network.web3\n    let activeAccountAddress = getState().network.activeAccountAddress\n    let contract = web3.eth.contract(ERC20_TOKEN_ABI).at(tokenAddress)\n\n    let supply = await new Promise(async resolve => {\n      contract.totalSupply.call(function (error, value) {\n        if (value) {\n          resolve(value)\n        }\n      })\n    })\n\n    const notificationAction = Notifications.show({\n      title: 'ERC20 Approval',\n      message: 'Please submit transaction',\n      level: 'warning',\n      position: 'tr',\n      autoDismiss: 10,\n      dismissible: true\n    }, 'warning')\n\n    dispatch(notificationAction)\n\n    if (web3 && activeAccountAddress && supply) {\n      return new Promise(resolve => {\n        contract.approve.sendTransaction(exchangeAddress, Number(supply).noExponents(), { from: activeAccountAddress }, function(error, transaction) {\n\n          if (transaction) {\n            let notificationAction = Notifications.show({\n              title: 'ERC20 Approval',\n              message: 'Your transaction has been submitted',\n              level: 'success',\n              position: 'tr',\n              autoDismiss: 10,\n              dismissible: true\n            }, 'success')\n\n            dispatch(notificationAction)\n\n            resolve(transaction)\n          }\n\n          if (error) {\n            let notificationAction = Notifications.show({\n              title: 'ERC20 Approval',\n              message: error.message,\n              level: 'error',\n              position: 'tr',\n              autoDismiss: 10,\n              dismissible: true\n            }, 'error')\n\n            dispatch(notificationAction)\n          }\n        })\n      })\n    }\n  }\n}\n\nexport function checkCoinAllowance (exchangeAddress, tokenAddress) {\n  return async function(dispatch, getState) {\n    let web3 = getState().network.web3\n    let activeAccountAddress = getState().network.activeAccountAddress\n    let contract = web3.eth.contract(ERC20_TOKEN_ABI).at(tokenAddress)\n\n    if (activeAccountAddress && web3) {\n      let allowanceBalance = await new Promise(async resolve => {\n        contract.allowance.call(activeAccountAddress, exchangeAddress, function (error, value) {\n          resolve(value.toString())\n        })\n      })\n\n      return (Number(allowanceBalance) > 0)\n    }\n  }\n}\n","export function makeid() {\n  var text = \"\";\n  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (var i = 0; i < 5; i++)\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n  return text;\n}\n\nexport function makeuint(web3, number) {\n  let hexnum = web3._extend.utils.toHex(number).substring(2)\n  return web3._extend.utils.padLeft(hexnum, 64)\n}\n\nexport function takeOrderPayload(orderId) {\n  return '0x' + makeuint(orderId)\n}","import Notifications from 'react-notification-system-redux'\nimport * as miscUtil from '../utils/MiscUtil'\nimport { ETHER_ADDRESS, ERC223_TOKEN_ABI, EXCHANGE_CONTRACT_ABI } from '../config'\n\nexport function takeOrderPayload(web3, orderId) {\n    return '0x' + miscUtil.makeuint(web3, orderId)\n}\n\nexport function executeOrder (tokenStandard, exchangeContractAddress, orderId, amount, tokenAddress, tokenName, tokenDecimals) {\n  return async function(dispatch, getState) {\n    const web3 = getState().network.web3\n    const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(exchangeContractAddress)\n    const activeAccountAddress = getState().network.activeAccountAddress\n    const action = tokenAddress === ETHER_ADDRESS ? 'Buy' : 'Sell'\n\n    if (web3 && exchangeContract && activeAccountAddress) {\n      if (tokenAddress !== ETHER_ADDRESS) {\n        if (tokenStandard === 'ERC223') {\n          let tokenContract = web3.eth.contract(ERC223_TOKEN_ABI).at(tokenAddress)\n          let totalAmount = amount * (10 ** tokenDecimals)\n          let payload = takeOrderPayload(web3, orderId)\n\n          return new Promise(resolve => {\n            tokenContract.transfer.estimateGas(exchangeContract.address,\n              totalAmount, payload, { from: activeAccountAddress }, function (error, gasAmount) {\n                if (gasAmount) {\n                  tokenContract.transfer.sendTransaction(exchangeContract.address,\n                    totalAmount, payload, { from: activeAccountAddress, gas: gasAmount },  function(error, transaction) {\n                      if (transaction) {\n                        let notificationAction = Notifications.show({\n                          title: action + ' ' + tokenName,\n                          message: 'Your transaction has been submitted',\n                          level: 'success',\n                          position: 'tr',\n                          autoDismiss: 10,\n                          dismissible: true\n                        }, 'success')\n\n                        dispatch(notificationAction)\n\n                        resolve(transaction)\n                      }\n\n                      if (error) {\n                        let notificationAction = Notifications.show({\n                          title: action + ' ' + tokenName,\n                          message: error.message,\n                          level: 'error',\n                          position: 'tr',\n                          autoDismiss: 10,\n                          dismissible: true\n                        }, 'error')\n\n                        dispatch(notificationAction)\n                      }\n                    }\n                  )\n                }\n\n                if (error) {\n                  let notificationAction = Notifications.show({\n                    title: action + ' ' + tokenName,\n                    message: error.message,\n                    level: 'error',\n                    position: 'tr',\n                    autoDismiss: 10,\n                    dismissible: true\n                  }, 'error')\n\n                  dispatch(notificationAction)\n                }\n              })\n            })\n          } else {\n            let totalAmount = amount * (10 ** tokenDecimals)\n\n            if (web3 && exchangeContract && tokenAddress) {\n              return new Promise(resolve => {\n                exchangeContract.buyOrderWithERC20Token.estimateGas(orderId, tokenAddress, totalAmount, { from: activeAccountAddress }, function(error, gasAmount) {\n                  if (gasAmount) {\n                    exchangeContract.buyOrderWithERC20Token.sendTransaction(orderId, tokenAddress, totalAmount, { from: activeAccountAddress, gas: gasAmount }, function(error, transaction) {\n                      if (transaction) {\n                        let notificationAction = Notifications.show({\n                          title: action + ' ' + tokenName,\n                          message: 'Your transaction has been submitted',\n                          level: 'success',\n                          position: 'tr',\n                          autoDismiss: 10,\n                          dismissible: true\n                        }, 'success')\n\n                        dispatch(notificationAction)\n\n                        resolve(transaction)\n                      }\n\n                      if (error) {\n                        let notificationAction = Notifications.show({\n                          title: action + ' ' + tokenName,\n                          message: error.message,\n                          level: 'error',\n                          position: 'tr',\n                          autoDismiss: 10,\n                          dismissible: true\n                        }, 'error')\n\n                        dispatch(notificationAction)\n                      }\n                    })\n                  }\n\n                  if (error) {\n                    let notificationAction = Notifications.show({\n                      title: action + ' ' + tokenName,\n                      message: error.message,\n                      level: 'error',\n                      position: 'tr',\n                      autoDismiss: 10,\n                      dismissible: true\n                    }, 'error')\n\n                    dispatch(notificationAction)\n                  }\n                })\n              })\n            }\n          }\n        } else {\n          if (web3 && exchangeContract) {\n            let value = web3.toWei(amount, 'ether')\n\n            if (value) {\n              return new Promise(resolve => {\n                exchangeContract.buyOrderWithEth.estimateGas(orderId,\n                { from: activeAccountAddress, value: value }, function(error, gasAmount) {\n                  if (gasAmount) {\n\n                    exchangeContract.buyOrderWithEth.sendTransaction(orderId,\n                      { from: activeAccountAddress, value: value, gas: gasAmount }, function(error, transaction) {\n                        if (transaction) {\n                          let notificationAction = Notifications.show({\n                            title: action + ' ' + tokenName,\n                            message: 'Your transaction has been submitted',\n                            level: 'success',\n                            position: 'tr',\n                            autoDismiss: 10,\n                            dismissible: true\n                          }, 'success')\n\n                          dispatch(notificationAction)\n\n                          resolve(transaction)\n                        }\n\n                        if (error) {\n                          let notificationAction = Notifications.show({\n                            title: action + ' ' + tokenName,\n                            message: error.message,\n                            level: 'error',\n                            position: 'tr',\n                            autoDismiss: 10,\n                            dismissible: true\n                          }, 'error')\n\n                          dispatch(notificationAction)\n                        }\n                      }\n                    )\n                  }\n\n                  if (error) {\n                    let notificationAction = Notifications.show({\n                      title: action + ' ' + tokenName,\n                      message: error.message,\n                      level: 'error',\n                      position: 'tr',\n                      autoDismiss: 10,\n                      dismissible: true\n                    }, 'error')\n\n                    dispatch(notificationAction)\n                  }\n                })\n              }\n            )\n          }\n        }\n      }\n    }\n  }\n}\n","import Notifications from 'react-notification-system-redux'\nimport * as miscUtil from '../utils/MiscUtil'\nimport { BigNumber as BigNumberJS } from 'bignumber.js'\nimport { utils } from 'ethers'\nimport { BigNumber } from 'ethers/utils'\nimport padStart from 'lodash/padStart'\nimport { TOKEN_DECIMALS, EXCHANGE_CONTRACT, EXCHANGE_CONTRACT_ABI, ETHER_ADDRESS, ERC223_TOKEN_ABI, ERC20_TOKEN_ABI } from '../config'\n\nexport function createOrderPayload(web3, priceMul, priceDiv, buyToken) {\n  let paddedToken = buyToken === '0x0' ? ETHER_ADDRESS : buyToken\n  return '0x' + miscUtil.makeuint(web3, priceMul) + miscUtil.makeuint(web3, priceDiv) + paddedToken.substring(2)\n}\n\nexport function createERC223OrderPayload(priceMul, priceDiv, buytoken) {\n  let paddedToken = buytoken === '0x0' ? ETHER_ADDRESS : buytoken\n    return '0x' +\n      toUint(priceMul.toFixed()) +\n      toUint(priceDiv.toFixed()) +\n      paddedToken.substring(2)\n}\n\nexport function toUint(num) {\n  return padStart(utils.hexlify(toSuitableBigNumber(num)).substring(2), 64, '0')\n}\n\nexport function toSuitableBigNumber(n) {\n  if (n instanceof BigNumber) { return n }\n  if (n instanceof BigNumberJS) {\n    return utils.bigNumberify(n.integerValue(BigNumberJS.ROUND_DOWN).toFixed())\n  }\n  try {\n    return utils.bigNumberify(n.valueOf())\n  } catch(e) {\n    let tmp = utils.bigNumberify(n.toString())\n    if (tmp.toString() !== n.toString()) { throw e }\n    return tmp\n  }\n}\n\nexport function createOrderErc223 (tradeAmount, pricePerUnit, buyTokenAddress, sellTokenAddress) {\n  return async function(dispatch, getState) {\n    const web3 = getState().network.web3\n    const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(EXCHANGE_CONTRACT)\n    const activeAccountAddress = getState().network.activeAccountAddress\n\n    const notificationAction = Notifications.show({\n      title: 'Create Order',\n      message: 'Please submit transaction',\n      level: 'info',\n      position: 'tr',\n      autoDismiss: 10,\n      dismissible: true\n    }, 'info')\n\n    dispatch(notificationAction)\n\n    if (sellTokenAddress === ETHER_ADDRESS) {\n      let tokenContract = web3.eth.contract(ERC223_TOKEN_ABI).at(buyTokenAddress)\n\n      if (web3 && exchangeContract && activeAccountAddress && tokenContract) {\n        let priceMul = new BigNumberJS(pricePerUnit).shiftedBy(18)\n        let priceDiv = new BigNumberJS(1).shiftedBy(TOKEN_DECIMALS)\n\n        return new Promise(resolve => {\n          exchangeContract.sellEther.sendTransaction(buyTokenAddress,\n            Number(toSuitableBigNumber(priceMul)),\n            Number(toSuitableBigNumber(priceDiv)), { from: activeAccountAddress, value: web3.toWei(Number(tradeAmount), 'ether') }, function(error, transaction) {\n              if (transaction) {\n                let notificationAction = Notifications.show({\n                  title: 'Create Order',\n                  message: 'Your transaction has been submitted',\n                  level: 'success',\n                  position: 'tr',\n                  autoDismiss: 10,\n                  dismissible: true\n                }, 'success')\n\n                dispatch(notificationAction)\n                resolve(transaction)\n              }\n\n              if (error) {\n                let notificationAction = Notifications.show({\n                  title: 'Create Order',\n                  message: error.message,\n                  level: 'error',\n                  position: 'tr',\n                  autoDismiss: 10,\n                  dismissible: true\n                }, 'error')\n\n                dispatch(notificationAction)\n              }\n            }\n          )\n        })\n      }\n    }\n\n    if (buyTokenAddress === ETHER_ADDRESS) {\n      let tokenContract = web3.eth.contract(ERC223_TOKEN_ABI).at(sellTokenAddress)\n\n      if (web3 && exchangeContract && activeAccountAddress && tokenContract) {\n        let priceDiv = new BigNumberJS(pricePerUnit).shiftedBy(18)\n        let priceMul = new BigNumberJS(1).shiftedBy(TOKEN_DECIMALS)\n\n        let payload = createERC223OrderPayload(\n          priceMul,\n          priceDiv,\n          ETHER_ADDRESS\n        )\n\n        let tradedAmount = new BigNumberJS(tradeAmount).shiftedBy(TOKEN_DECIMALS)\n\n        return new Promise(resolve => {\n          tokenContract.transfer.sendTransaction(exchangeContract.address,\n            Number(toSuitableBigNumber(tradedAmount)), payload, { from: activeAccountAddress }, function (error, transaction) {\n              if (transaction) {\n                let notificationAction = Notifications.show({\n                  title: 'Create Order',\n                  message: 'Your transaction has been submitted',\n                  level: 'success',\n                  position: 'tr',\n                  autoDismiss: 10,\n                  dismissible: true\n                }, 'success')\n\n                dispatch(notificationAction)\n\n                resolve(transaction)\n              }\n\n              if (error) {\n                let notificationAction = Notifications.show({\n                  title: 'Create Order',\n                  message: error.message,\n                  level: 'error',\n                  position: 'tr',\n                  autoDismiss: 10,\n                  dismissible: true\n                }, 'error')\n\n                dispatch(notificationAction)\n              }\n            })\n          }\n        )\n      }\n    }\n  }\n}\n\nexport function createOrderErc20(tradeAmount, pricePerUnit, buyTokenAddress, sellTokenAddress) {\n  return async function(dispatch, getState) {\n    const web3 = getState().network.web3\n    const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(EXCHANGE_CONTRACT)\n    const activeAccountAddress = getState().network.activeAccountAddress\n\n    const notificationAction = Notifications.show({\n      title: 'Create Order',\n      message: 'Please submit transaction',\n      level: 'info',\n      position: 'tr',\n      autoDismiss: 10,\n      dismissible: true\n    }, 'info')\n\n    dispatch(notificationAction)\n\n    if (web3 && sellTokenAddress === ETHER_ADDRESS) {\n      let tokenContract = web3.eth.contract(ERC20_TOKEN_ABI).at(buyTokenAddress)\n\n      if (web3 && exchangeContract && activeAccountAddress && tokenContract) {\n        let priceMul = new BigNumberJS(pricePerUnit).shiftedBy(18)\n        let priceDiv = new BigNumberJS(1).shiftedBy(TOKEN_DECIMALS)\n\n        return new Promise(resolve => {\n          exchangeContract.sellEther.sendTransaction(buyTokenAddress,\n            Number(toSuitableBigNumber(priceMul)),\n            Number(toSuitableBigNumber(priceDiv)),\n            { from: activeAccountAddress, value: web3.toWei(Number(tradeAmount), 'ether') }, function(error, transaction) {\n              if (transaction) {\n                let notificationAction = Notifications.show({\n                  title: 'Create Order',\n                  message: 'Your transaction has been submitted',\n                  level: 'success',\n                  position: 'tr',\n                  autoDismiss: 10,\n                  dismissible: true\n                }, 'success')\n\n                dispatch(notificationAction)\n\n                resolve(transaction)\n              }\n\n              if (error) {\n                let notificationAction = Notifications.show({\n                  title: 'Create Order',\n                  message: error.message,\n                  level: 'error',\n                  position: 'tr',\n                  autoDismiss: 10,\n                  dismissible: true\n                }, 'error')\n\n                dispatch(notificationAction)\n              }\n            }\n          )\n        })\n      }\n    }\n\n    if (web3 && buyTokenAddress === ETHER_ADDRESS) {\n      let tradedAmount = new BigNumberJS(tradeAmount).shiftedBy(TOKEN_DECIMALS)\n\n      let priceDiv = new BigNumberJS(pricePerUnit).shiftedBy(18)\n      let priceMul = new BigNumberJS(1).shiftedBy(TOKEN_DECIMALS)\n\n      return new Promise(resolve => {\n        exchangeContract.sellERC20Token.sendTransaction(\n          sellTokenAddress,\n          ETHER_ADDRESS,\n            Number(toSuitableBigNumber(tradedAmount)),\n            Number(toSuitableBigNumber(priceMul)),\n            Number(toSuitableBigNumber(priceDiv)),\n          { from: activeAccountAddress }, function (error, transaction) {\n            if (transaction) {\n              let notificationAction = Notifications.show({\n                title: 'Create Order',\n                message: 'Your transaction has been submitted',\n                level: 'success',\n                position: 'tr',\n                autoDismiss: 10,\n                dismissible: true\n              }, 'success')\n\n              dispatch(notificationAction)\n\n              resolve(transaction)\n            }\n\n            if (error) {\n              let notificationAction = Notifications.show({\n                title: 'Create Order',\n                message: error.message,\n                level: 'error',\n                position: 'tr',\n                autoDismiss: 10,\n                dismissible: true\n              }, 'error')\n\n              dispatch(notificationAction)\n            }\n          })\n        }\n      )\n    }\n  }\n}\n","export const RESET_ORDER_DETAILS_DATA = 'saturn-api/RESET_ORDER_DETAILS_DATA'\nexport const UPDATE_ORDER_DETAILS_DATA = 'saturn-api/UPDATE_ORDER_DETAILS_DATA'\n\nexport function fetchOrder (networkSymbol, txHash) {\n  return async function(dispatch, getState) {\n    let orderDetailsData = getState().exchange.selectedOrder\n\n    if (orderDetailsData.data !== undefined) {\n      dispatch({\n        type: RESET_ORDER_DETAILS_DATA\n      })\n    }\n\n    fetchSaturnApi(networkSymbol, txHash).then((orderData) => {\n      if (orderData) {\n        let targetOrderData = { data: orderData, isSync: false }\n\n        dispatch({\n          type: UPDATE_ORDER_DETAILS_DATA,\n          payload: targetOrderData\n        })\n      }\n    })\n  }\n}\n\nexport async function fetchSaturnApi(networkSymbol, txHash) {\n  return await new Promise(resolve => {\n    fetch(`https://ticker.saturn.network/api/v2/orders/by_tx/${networkSymbol}/${txHash}.json`)\n      .then(function (response) {\n        return response.json()\n      })\n      .then(function (responseData) {\n        resolve(responseData)\n      })\n  })\n}\n","export function fetchTxReceiptByTransactionHash (transactionHash, blockchain) {\n  return new Promise(resolve => {\n    fetch(`https://ticker.saturn.network/api/v2/transactions/${blockchain}/${transactionHash}.json`)\n    .then(function (response) {\n      return response.json()\n    })\n    .then(function (responseData) {\n      resolve(responseData)\n    })\n  })\n}\n","export const UPDATE_LEADERBOARD_DATA = 'saturn-api/UPDATE_LEADERBOARD_DATA'\n\nexport function fetchLeaderboard (networkSymbol, tokenAddress, start, end) {\n  return async function(dispatch, getState) {\n    fetchSaturnApi(networkSymbol, tokenAddress, start, end).then((leaderboard) => {\n      dispatch({\n        type: UPDATE_LEADERBOARD_DATA,\n        payload: { data: leaderboard, isSync: false }\n      })\n    })\n  }\n}\n\nexport async function fetchSaturnApi(networkSymbol, tokenAddress, start, end) {\n  return await new Promise(resolve => {\n    fetch(`https://ticker.saturn.network/api/v2/trades/leaderboard/period/${networkSymbol}/${tokenAddress}/${start}/${end}.json`)\n      .then(function (response) {\n        return response.json()\n      })\n      .then(function (responseData) {\n        resolve(responseData)\n      })\n  })\n}\n","import { BigNumber } from 'bignumber.js';\n\nexport function handleTotalPrice (price, amount) {\n  const bdPrice = new BigNumber(price)\n  const bdAmount = new BigNumber(amount)\n\n  return bdPrice.times(bdAmount)\n}\n\nexport function handleTotalAmount (price, total) {\n  const bdPrice = new BigNumber(price)\n  const bdTotal = new BigNumber(total)\n\n  return bdTotal.div(bdPrice)\n}\n\n\nexport function handleTotalPriceAfterFees (price, amount, fees) {\n  const bdPrice = new BigNumber(price)\n  const bdAmount = new BigNumber(amount)\n  const bdFees = new BigNumber(fees)\n\n  return bdPrice.times(bdAmount).minus(bdFees)\n}\n","import { BigNumber } from 'bignumber.js';\n\n// Balances\n\nexport function getBalanceInEther(address, web3) {\n  return new Promise(resolve => {\n    return web3.eth.getBalance(address, function(error, result) {\n      if(error) {\n        resolve(0)\n      }\n      else {\n        resolve(web3.fromWei(result.toNumber(), \"ether\"));\n      }\n    });\n  });\n}\n\nexport function getBalance(address, web3, activeAccountAddress) {\n  return new Promise(resolve => {\n    let tokenABI = JSON.parse('[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]')\n    let tokenContract = web3.eth.contract(tokenABI).at(address)\n\n    return tokenContract.balanceOf.call(activeAccountAddress, function (error, value) {\n      if (value) {\n        resolve(new BigNumber(value))\n      }\n    })\n  })\n}\n\n// Standard Detector\n\nexport async function isERC223(web3, contractAddress) {\n  return new Promise(async resolve => {\n    await web3.eth.getCode(contractAddress, function(error, result) {\n      if (result) {\n        let hash = \"be45fd62\"\n        resolve(result.indexOf(hash.slice(2, hash.length)) > 0)\n      }\n    })\n  })\n}\n\nexport async function isERC20(web3, contractAddress) {\n  return new Promise(async resolve => {\n    await web3.eth.getCode(contractAddress, function(error, result) {\n      if (result) {\n        let hash = \"095ea7b3\"\n        resolve(result.indexOf(hash.slice(2, hash.length)) > 0)\n      }\n    })\n  })\n}\n\n\n// Explorer\n\nexport function handleTx (tx) {\n  var i = 0, strRep = \"\", strDes = \"\"\n\n  strRep = tx.substring(3, tx.length - 3)\n\n  for (i = 3; i > 0; i--)\n    strDes += \".\"\n\n  var resStr = tx.replace(strRep, strDes)\n\n  return resStr\n}\n\nexport function handleExplorerForTx(blockchain, txHash) {\n  if (blockchain === \"ETH\") {\n    return `https://etherscan.io/tx/${txHash}`\n  } else if (blockchain === \"ETC\") {\n    return `https://blockscout.com/etc/mainnet/tx/${txHash}`\n  }\n}\n\nexport function handleExplorerForAddress(blockchain, address) {\n  if (blockchain === \"ETH\") {\n    return `https://etherscan.io/address/${address}`\n  } else if (blockchain === \"ETC\") {\n    return `https://blockscout.com/etc/mainnet/address/${address}`\n  }\n}\n\nexport function handleExplorerForTokenAddress(blockchain, tokenAddress) {\n  if (blockchain === \"ETH\") {\n    return `https://etherscan.io/token/${tokenAddress}`\n  } else if (blockchain === \"ETC\") {\n    return `https://blockscout.com/etc/mainnet/tokens/${tokenAddress}`\n  }\n}","import React, {Component} from 'react'\nimport { InputGroup } from 'reactstrap'\nimport NumberFormat from 'react-number-format'\nimport { debounce } from 'debounce'\nimport { handleTotalPrice } from '../../utils/TokenUtil'\nimport { handleExplorerForTx } from '../../utils/Utils'\nimport { fetchTxReceiptByTransactionHash } from '../../actions'\nimport { Dot } from 'react-animated-dots'\nimport IosPlanet from 'react-ionicons/lib/IosPlanet'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExchangeAlt, faBalanceScale, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport { TOKEN_STANDARD, TOKEN_ADDRESS, TOKEN_SYMBOL, TOKEN_DECIMALS, TOKEN_NETWORK, TOKEN_LOGO, BLOCKCHAIN_LOGO, ETHER_ADDRESS, TOKEN_NAME } from '../../config'\n\nvar numbro = require('numbro');\n\nclass CreateOrderForm extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      orderType: 'Buy',\n      orderAmount: 0,\n      totalAmount: null,\n      pricePerUnit: 0,\n      errorMessage: '',\n      transactionHash: '',\n      txReceipt: ''\n    }\n\n    this.handleAmountChange = debounce(this.handleAmountChange, 500);\n    this.handlePriceChange = debounce(this.handlePriceChange, 500);\n  }\n\n  async selectOrderType(orderType) {\n    this.setState({orderType: orderType})\n    await this.recalculateErrors(orderType)\n  }\n\n  async loadTransactionData() {\n    if (this.state.transactionHash !== '') {\n      let txReceipt = await fetchTxReceiptByTransactionHash(this.state.transactionHash, TOKEN_NETWORK)\n\n      if (txReceipt && txReceipt !== this.state.txReceipt) {\n        this.setState({ txReceipt: txReceipt })\n      }\n    }\n  }\n\n  async handleAmountChange (value) {\n    if (value) {\n      const orderAmount = Number(numbro(value).value()).noExponents()\n      const pricePerUnit = this.state.pricePerUnit\n\n      await this.setState({ orderAmount: orderAmount })\n\n      if (pricePerUnit) {\n        const total = Number(handleTotalPrice(pricePerUnit, orderAmount)).noExponents()\n        await this.setState({ totalAmount: total })\n      }\n\n      await this.recalculateErrors(this.state.orderType)\n    }\n  }\n\n  async handlePriceChange (value) {\n    if (value) {\n      const pricePerUnit = Number(numbro(value).value()).noExponents()\n      const orderAmount = this.state.orderAmount\n\n      await this.setState({ pricePerUnit: pricePerUnit })\n\n      if (orderAmount && pricePerUnit) {\n        const total = Number(handleTotalPrice(pricePerUnit, orderAmount)).noExponents()\n        await this.setState({ totalAmount: total })\n      }\n\n      await this.recalculateErrors(this.state.orderType)\n    };\n  }\n\n  async resetOrder() {\n    this.setState({ orderAmount: 0, totalAmount: null, pricePerUnit: 0, errorMessage: '', transactionHash: '', txReceipt: '' })\n  }\n\n  async signTransaction () {\n    let transactionHash\n\n    if (TOKEN_STANDARD === 'ERC20') {\n      if (this.state.orderType === 'Sell') {\n        transactionHash = await this.props.createOrderErc20(this.state.orderAmount, this.state.pricePerUnit, ETHER_ADDRESS, TOKEN_ADDRESS)\n      } else {\n        transactionHash = await this.props.createOrderErc20(this.state.totalAmount, this.state.pricePerUnit, TOKEN_ADDRESS, ETHER_ADDRESS)\n      }\n    }\n\n    if (TOKEN_STANDARD === 'ERC223') {\n      if (this.state.orderType === 'Sell') {\n        transactionHash = await this.props.createOrderErc223(this.state.orderAmount, this.state.pricePerUnit, ETHER_ADDRESS, TOKEN_ADDRESS)\n      } else {\n        transactionHash = await this.props.createOrderErc223(this.state.totalAmount, this.state.pricePerUnit, TOKEN_ADDRESS, ETHER_ADDRESS)\n      }\n    }\n\n    if (transactionHash) {\n      this.setState({ transactionHash: transactionHash })\n    }\n  }\n\n  async recalculateErrors (orderType) {\n    let ethereumBalance      = this.props.etherBalance\n    let tokenBalance         = this.props.tokenBalance\n\n    if (orderType === 'Buy') {\n      if (this.state.totalAmount) {\n        if (Number(this.state.totalAmount) > Number(ethereumBalance)) {\n          this.setState({errorMessage: 'Insufficient funds, your wallet balance is ' + ethereumBalance + ' ' + TOKEN_NETWORK })\n        } else if (Number(this.state.totalAmount) < Number(0.001)) {\n          this.setState({errorMessage: `The order you are trying to create is too small. Order size (token amount times token price) should be greater than 0.001 ${TOKEN_NETWORK}` })\n        } else {\n          this.setState({errorMessage: ''})\n        }\n      } else {\n        this.setState({errorMessage: ''})\n      }\n    }\n\n    if (orderType === 'Sell') {\n      if (this.state.orderAmount) {\n        if (Number(this.state.orderAmount) > Number(tokenBalance)) {\n          this.setState({errorMessage: 'Insufficient funds, your wallet balance is ' + tokenBalance + ' ' + TOKEN_SYMBOL })\n        } else if (Number(this.state.totalAmount) < Number(0.001)) {\n          this.setState({errorMessage: `The order you are trying to create is too small. Order size (token amount times token price) should be greater than 0.001 ${TOKEN_NETWORK}` })\n        } else {\n          this.setState({errorMessage: ''})\n        }\n      } else {\n        this.setState({errorMessage: ''})\n      }\n    }\n\n  }\n\n  componentDidMount() {\n    this.checkTxStatus = setInterval(this.loadTransactionData.bind(this), 5000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.checkTxStatus);\n  }\n\n  render() {\n    const pricePerTokenMaskDecimal = 18\n    const ethPriceMaskDecimal = 18\n\n    let targetTokenBestBuyPrice = this.props.bestBuyPrice\n    let targetTokenBestSellPrice = this.props.bestSellPrice\n\n    let targetTokenBalance = this.props.tokenBalance\n    let transactionSigned = (this.state.transactionHash !== '')\n\n    return (\n      <div>\n        { !transactionSigned &&\n          <div>\n            <div className='card-head text-center'>\n              <h4 className='card-title'>Create Order</h4>\n            </div>\n\n            <div className='card-head'>\n              <span className='card-sub-title text-light font-mid'>Step 1</span>\n              <h4 className='card-title'>Select Order Type</h4>\n            </div>\n\n            <div className='card-text'>\n              <p className='text-light'>As a market maker you enjoy zero fees. Please make sure you have selected the correct order type.</p>\n            </div>\n\n            <div className='token-currency-choose'>\n              <div className='row guttar-15px'>\n                <div className='col-lg-6 col-md-12'>\n                  <div className='order-type'>\n                    <input onClick={() => this.selectOrderType('Buy')} className='order-type-check' type='radio' id='buy-label' name='payOption' defaultChecked/>\n                    <label className='order-type-label' htmlFor='buy-label'>\n                      <span className='pay-title'><FontAwesomeIcon className='mr-10' icon={faExchangeAlt} size='lg' color='#fff' />Buy {TOKEN_SYMBOL} for {TOKEN_NETWORK}</span>\n                    </label>\n                  </div>\n                </div>\n                <div className='col-lg-6 col-md-12'>\n                  <div className='order-type'>\n                    <input onClick={() => this.selectOrderType('Sell')} className='order-type-check' type='radio' id='sell-label' name='payOption'/>\n                    <label className='order-type-label' htmlFor='sell-label'>\n                        <span className='pay-title'><FontAwesomeIcon className='mr-10' icon={faBalanceScale} size='lg' color='#fff' />Sell {TOKEN_SYMBOL} for {TOKEN_NETWORK}</span>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className='card-head'>\n              <span className='card-sub-title text-light font-mid'>Step 2</span>\n              <h4 className='card-title'>Enter Amount and Price Per Token</h4>\n            </div>\n\n            <div className='card-text'>\n              <p className='text-light'>Enter amount of tokens you would like to <b>{this.state.orderType.toUpperCase()}</b> and your desired price.</p>\n            </div>\n\n            <div className='row'>\n              <div className='col-lg-6 col-md-6 col-xs-12 text-center mt-15'>\n                <span className='input-title font-bold'>Amount of Tokens</span>\n\n                <div className='input-wrapper'>\n                  <InputGroup>\n                     <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                     thousandSeparator={true}\n                                     allowNegative={false}\n                                     decimalScale={TOKEN_DECIMALS}\n                                     onChange={event => this.handleAmountChange(event.target.value)} />\n                  </InputGroup>\n\n                  <div className='input-currency'>\n                    { TOKEN_LOGO ? <img src={`${TOKEN_LOGO}`} alt={TOKEN_NAME} height='20' width='20' /> : '' } {TOKEN_SYMBOL}\n                  </div>\n                </div>\n\n                <div className='pdt-1x text-small text-light text-left'>\n                  { this.state.orderType === 'Buy' && <span>Balance: {this.props.etherBalance} {TOKEN_NETWORK}</span> }\n                  { this.state.orderType === 'Sell' && <span>Balance: {Number(targetTokenBalance).noExponents()} {TOKEN_SYMBOL}</span> }\n                </div>\n              </div>\n\n              <div className='col-lg-6 col-md-6 col-xs-12 text-center mt-15'>\n                <span className='input-title font-bold'>Price Per Token</span>\n                <div className='input-wrapper'>\n                  <InputGroup>\n                    <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                   thousandSeparator={true}\n                                   allowNegative={false}\n                                   decimalScale={pricePerTokenMaskDecimal}\n                                   onChange={event => this.handlePriceChange(event.target.value)} />\n                  </InputGroup>\n\n                  <div className='input-currency'>\n                    <img src={`${BLOCKCHAIN_LOGO}`} alt={TOKEN_NETWORK} height='20' width='20' /> {TOKEN_NETWORK}\n                  </div>\n                </div>\n\n                <div className='pdb-1x text-light text-left'>\n                  { (this.state.pricePerUnit > 0) && <span className='input-note'>Price Per Token: 1 {TOKEN_SYMBOL} = {Number(this.state.pricePerUnit).noExponents()} {TOKEN_NETWORK}</span> }\n                  { targetTokenBestSellPrice && this.state.orderType === 'Sell' && <span className='input-note'>Current Best Price: {Number(targetTokenBestSellPrice).noExponents()} {TOKEN_NETWORK}</span>}\n                  { targetTokenBestBuyPrice && this.state.orderType === 'Buy' && <span className='input-note'>Current Best Price: {Number(targetTokenBestBuyPrice).noExponents()} {TOKEN_NETWORK}</span>}\n                </div>\n              </div>\n          </div>\n\n\n          { this.state.totalAmount &&\n            <div>\n              <div className='card-head'>\n                <span className='card-sub-title text-light font-mid'>Step 3</span>\n                <h4 className='card-title'>Confirm Your Order</h4>\n              </div>\n\n              <div className='card-text'>\n                <p className='text-light'>Your funds will be sent to the order book smart contract. Tokens will appear in your wallet when a trader fills your order. You can cancel your order at any time.</p>\n              </div>\n\n              <div className='row align-items-center justify-content-center'>\n                <div className='col-md-6 col-sm-12 text-center mt-15'>\n                  <span className='input-title font-bold'>You Will Send</span>\n                  <div className='input-wrapper'>\n\n                    { this.state.orderType === 'Buy' &&\n                      <div>\n                        <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                thousandSeparator={true}\n                                allowNegative={false}\n                                decimalScale={ethPriceMaskDecimal}\n                                disabled value={this.state.totalAmount} />\n\n                        <div className='input-currency'><img src={`${BLOCKCHAIN_LOGO}`} alt={TOKEN_NETWORK} height='20' width='20' /> {TOKEN_NETWORK}</div>\n                      </div> }\n\n                    { this.state.orderType === 'Sell' &&\n                      <div>\n                        <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                thousandSeparator={true}\n                                allowNegative={false}\n                                decimalScale={TOKEN_DECIMALS}\n                                disabled value={this.state.orderAmount} />\n\n                        <div className='input-currency'>{ TOKEN_LOGO ? <img src={`${TOKEN_LOGO}`} alt={TOKEN_NAME} height='20' width='20' /> : '' } {TOKEN_SYMBOL}</div>\n                      </div> }\n                  </div>\n                </div>\n\n                <div className='col-md-6 col-sm-12 text-center mt-15'>\n                  <span className='input-title font-bold'>You Will Get</span>\n                  <div className='input-wrapper'>\n                    { this.state.orderType === 'Buy' && <div>\n                      <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                thousandSeparator={true}\n                                allowNegative={false}\n                                decimalScale={TOKEN_DECIMALS}\n                                disabled\n                                value={this.state.orderAmount} />\n                      <div className='input-currency'>{ TOKEN_LOGO ? <img src={`${TOKEN_LOGO}`} alt={TOKEN_NAME} height='20' width='20' /> : '' } {TOKEN_SYMBOL}</div>\n                    </div>}\n\n                    { this.state.orderType === 'Sell' && <div>\n                      <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                thousandSeparator={true}\n                                allowNegative={false}\n                                decimalScale={ethPriceMaskDecimal}\n                                disabled\n                                value={this.state.totalAmount} />\n                      <div className='input-currency'><img src={`${BLOCKCHAIN_LOGO}`} alt={TOKEN_NETWORK} height='20' width='20' /> {TOKEN_NETWORK}</div>\n                    </div>}\n                  </div>\n                </div>\n\n                <div className='col-lg-12 text-center mt-15'>\n                  { this.state.errorMessage !== '' && <div>\n                    <FontAwesomeIcon className='mr-10' icon={faTimesCircle} size='lg' color='#ff6868' />\n                    <span className='note-text text-danger'>{this.state.errorMessage}</span>\n                  </div> }\n                </div>\n              </div>\n            </div>\n          }\n\n          { this.state.totalAmount && this.state.errorMessage === '' && <div className='buttons-wrapper'>\n            <div className='action-button'><button onClick={() => this.signTransaction()} className='btn btn-success-alt btn-between w-100'>Create Order</button></div>\n          </div> }\n        </div>}\n\n        { this.state.transactionHash !== '' && <div>\n          <div className='status'>\n            <IosPlanet fontSize='66px' color={ this.state.txReceipt === '' ? '#fff' : '#009f65'} beat={this.state.txReceipt === '' } />\n\n            <span className='status-text large'>Thank you for choosing Saturn Network</span>\n            <p className='px-md-5'></p>\n          </div>\n\n          { <div>\n              <ul className='data-details-list'>\n                <li>\n                  <div className='data-details-head'>Tx Hash</div>\n                  <div className='data-details-des'><strong><a className='dark-url' href={handleExplorerForTx(TOKEN_NETWORK, this.state.transactionHash)} target='_blank' rel='noreferrer noopener'>{this.state.transactionHash}</a></strong></div>\n                </li>\n\n                <li>\n                    <div className='data-details-head'>Order Type</div>\n                    <div className='data-details-des'><strong>{this.state.orderType} {TOKEN_SYMBOL} for {TOKEN_NETWORK}</strong></div>\n                </li>\n\n                <li>\n                    <div className='data-details-head'>Price Per Token</div>\n                    <div className='data-details-des'><strong>1 {TOKEN_SYMBOL} = {Number(this.state.pricePerUnit).noExponents()} {TOKEN_NETWORK}</strong></div>\n                </li>\n\n                <li>\n                  <div className='data-details-head'>Total Price</div>\n                  <div className='data-details-des'>{this.state.orderType === 'Sell' && <strong>{this.state.orderAmount} {TOKEN_SYMBOL} = <NumberFormat value={this.state.totalAmount} displayType={'text'} decimalScale={ethPriceMaskDecimal} /> {TOKEN_NETWORK}</strong> }\n                    {this.state.orderType === 'Buy' && <strong><NumberFormat value={this.state.totalAmount} displayType={'text'} decimalScale={ethPriceMaskDecimal} /> {TOKEN_NETWORK} = {this.state.orderAmount} {TOKEN_SYMBOL}</strong> }\n                  </div>\n                </li>\n\n                <li>\n                    <div className='data-details-head'>Block</div>\n                    <div className='data-details-des'>{ this.state.txReceipt ? <span>{this.state.txReceipt.blocknumber}</span> : <span>Pending <Dot>.</Dot><Dot>.</Dot><Dot>.</Dot></span> } <span></span></div>\n                </li>\n                <li>\n                    <div className='data-details-head'>Gas Used</div>\n                    <div className='data-details-des'>{ this.state.txReceipt ? <span>{Number(this.state.txReceipt.gasused)}</span> : <span>Pending <Dot>.</Dot><Dot>.</Dot><Dot>.</Dot></span>  } <span></span></div>\n                </li>\n                <li>\n                    <div className='data-details-head'>Actual Tx Cost / Fee</div>\n                    <div className='data-details-des'>{ this.state.txReceipt ? <span>{`${this.state.txReceipt.txprice} ${TOKEN_NETWORK}`}</span> : <span>Pending <Dot>.</Dot><Dot>.</Dot><Dot>.</Dot></span> } <span></span></div>\n                </li>\n              </ul>\n            </div> }\n\n          <div className='buttons-wrapper'>\n            <div className='action-button'><button onClick={() => this.resetOrder()} className='btn btn-success-alt btn-between w-100'>Create New Order</button></div>\n          </div>\n        </div> }\n      </div>\n    )\n  }\n}\n\nexport default CreateOrderForm\n","import React, {Component} from 'react'\n\nclass InstallWallet extends Component {\n  render() {\n    return (\n      <div>\n        <div className='card-head'>\n          <span className='card-sub-title text-light font-mid'>Quick Start</span>\n          <h4 className='card-title'>Install dApp Browser</h4>\n        </div>\n        <div className='card-text'>\n          <p>Saturn Network is a decentralized exchange for trading tokens that runs completely on chain and requires you to use a wallet that can browse dApps and sign transactions.</p>\n\n          <p>To trade <b><u>both</u></b> Ethereum and Ethereum Classic tokens:</p>\n\n\n          <div className='row wallets'>\n            <div className='col-lg-4 col-md-6 col-sm-12 wallet--item'>\n              <a className='dark-url' href='https://chrome.google.com/webstore/detail/nifty-wallet/jbdaocneiiinmjbjlgalhcelgbejmnid' rel='noopener noreferrer' target='_blank'>\n                <img align='center' className='wallet--logo' alt='Nifty Wallet Logo' src='wallets/nifty.png'/>\n                <h3 className='wallet--title'>Nifty Wallet</h3>\n              </a>\n            </div>\n\n            <div className='col-lg-4 col-md-6 col-sm-12 wallet--item'>\n              <a className='dark-url' href='https://www.saturn.network/blog/saturn-wallet-user-manual/' target='_blank' rel='noopener noreferrer'>\n                <img align='center' className='wallet--logo' alt='Saturn Wallet Logo' src='wallets/saturn-wallet.png'/>\n                <h3 className='wallet--title'>Saturn Wallet</h3>\n              </a>\n            </div>\n\n            <div className='col-lg-4 col-md-6 col-sm-12 wallet--item'>\n              <a className='dark-url' href='https://trustwalletapp.com/' rel='noopener noreferrer' target='_blank'>\n                <img align='center' className='wallet--logo' alt='Trust Wallet Logo' src='wallets/trust-wallet.png'/>\n                <h3 className='wallet--title'>Trust Wallet</h3>\n              </a>\n            </div>\n          </div>\n\n          <p>To <b><u>only</u></b> trade Ethereum tokens:</p>\n\n\n          <div className='row wallets'>\n            <div className='col-lg-6 col-md-6 col-sm-12 wallet--item'>\n              <a className='dark-url' href='https://metamask.io/' rel='noopener noreferrer' target='_blank'>\n                <img align='center' className='wallet--logo-small' alt='Metamask Wallet Logo' src='wallets/metamask.png'/>\n                <h3 className='wallet--title'>MetaMask</h3>\n              </a>\n            </div>\n\n            <div className='col-lg-6 col-md-6 col-sm-12 wallet--item'>\n              <a className='dark-url' href='https://www.cipherbrowser.com/' rel='noopener noreferrer' target='_blank'>\n                <img align='center' className='wallet--logo-small' alt='Cipher Wallet Logo' src='wallets/cipher.png'/>\n                <h3 className='wallet--title'>Cipher Wallet</h3>\n              </a>\n            </div>\n\n            <div className='col-lg-6 col-md-6 col-sm-12 wallet--item'>\n              <a className='dark-url' href='https://wallet.coinbase.com/' rel='noopener noreferrer' target='_blank'>\n                <img align='center' className='wallet--logo-small' alt='Coinbase Wallet Logo' src='wallets/coinbase.png'/>\n                <h3 className='wallet--title'>Coinbase Wallet</h3>\n              </a>\n            </div>\n\n            <div className='col-lg-6 col-md-6 col-sm-12 wallet--item'>\n              <a className='dark-url' href='https://enjinwallet.io/' rel='noopener noreferrer' target='_blank'>\n                <img align='center' className='wallet--logo-small' alt='Enjin Wallet Logo' src='wallets/enjin.png'/>\n                <h3 className='wallet--title'>Enjin Wallet</h3>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InstallWallet\n","import React, {Component} from 'react'\n\nclass LoginToWallet extends Component {\n  render() {\n    return (\n      <div>\n        <div className='card-head'>\n          <span className='card-sub-title text-light font-mid'>Quick Start</span>\n          <h4 className='card-title'>How to Start Trading</h4>\n        </div>\n        <div className='card-text'>\n          <p>We have not been able to detect your wallet, make sure you have done the following:</p>\n          <p>1. Please login to your preferred dApp browser and connect to the wallet you wish to use.</p>\n          <p>2. If you are using <b>MetaMask</b>, you need to approve our website in your settings. If you are not sure how to do this, you can <b><u><a className='dark-url' title='Metamask Approve Connection Guide' target='_blank' href='https://www.saturn.network/blog/metamask-approve-connections-guide' rel='noopener noreferrer'>follow our guide</a></u></b>.</p>\n          <p>3. Please ensure only one dApp browser is active. For example, you cannot have <b>MetaMask</b> and <b>Saturn Wallet</b> enabled at the same time on the same browser as they interfere with each other.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default LoginToWallet\n","import React, {Component} from 'react'\n\nclass NullBalance extends Component {\n  render() {\n    return (\n      <div>\n        <div className='card-head'>\n          <span className='card-sub-title text-light font-mid'>Quick Start</span>\n          <h4 className='card-title'>No Funds Available</h4>\n        </div>\n        <div className='card-text'>\n          <p>Your wallet is set up correctly but your balance is zero. We recommend using <a className='dark-url' href='https://changenow.io/?link_id=d9b89e6132bc40' target='_blank' rel='noopener noreferrer'>Change Now</a> or <a className='dark-url' href='https://changelly.com/?ref_id=ddfe5e06f859' target='_blank' rel='noopener noreferrer'>Changelly</a> if you are planning to trade Ethereum or Ethereum Classic.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default NullBalance\n","import React, {Component} from 'react'\nimport { TOKEN_NETWORK } from '../../config'\n\nclass WrongNetwork extends Component {\n  render() {\n    return (\n      <div>\n        <div className='card-head'>\n          <span className='card-sub-title text-light font-mid'>Quick Start</span>\n          <h4 className='card-title'>Wrong Network</h4>\n        </div>\n\n        <div className='card-text'>\n          { TOKEN_NETWORK === 'ETH' && <p>Please switch to Ethereum Network in your dApp browser.</p> }\n          { TOKEN_NETWORK === 'ETC' && <p>Please switch to Ethereum Classic Network in your dApp browser.</p> }\n\n\n          { TOKEN_NETWORK === 'ETC' && <div>\n            <b>But my dApp browser does not support Ethereum Classic?</b>\n            <p>We recommend installing a cross-chain wallet:</p>\n\n            <div className='row wallets'>\n              <div className='col-lg-4 col-md-6 col-sm-12 wallet--item'>\n                <a className='dark-url' href='https://chrome.google.com/webstore/detail/nifty-wallet/jbdaocneiiinmjbjlgalhcelgbejmnid' rel='noopener noreferrer' target='_blank'>\n                  <img align='center' className='wallet--logo' alt='Nifty Wallet Logo' src='wallets/nifty.png'/>\n                  <h3 className='wallet--title'>Nifty Wallet</h3>\n                </a>\n              </div>\n\n              <div className='col-lg-4 col-md-6 col-sm-12 wallet--item'>\n                <a className='dark-url' href='https://www.saturn.network/blog/saturn-wallet-user-manual/' target='_blank' rel='noopener noreferrer'>\n                  <img align='center' className='wallet--logo' alt='Saturn Wallet Logo' src='wallets/saturn-wallet.png'/>\n                  <h3 className='wallet--title'>Saturn Wallet</h3>\n                </a>\n              </div>\n\n              <div className='col-lg-4 col-md-6 col-sm-12 wallet--item'>\n                <a className='dark-url' href='https://trustwalletapp.com' rel='noopener noreferrer' target='_blank'>\n                  <img align='center' className='wallet--logo' alt='Trust Wallet Logo' src='wallets/trust-wallet.png'/>\n                  <h3 className='wallet--title'>Trust Wallet</h3>\n                </a>\n              </div>\n             </div>\n\n             <p>If you already use MetaMask then you will be able to import your account into Saturn Wallet or Nifty Wallet immediately with your account’s seed phrase.</p>\n            </div> }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WrongNetwork\n","import { BigNumber } from 'bignumber.js'\n\nexport function handleTx (tx) {\n  var i = 0, strRep = \"\", strDes = \"\"\n\n  strRep = tx.substring(3, tx.length - 3)\n\n  for (i = 3; i > 0; i--)\n    strDes += \".\"\n\n  var resStr = tx.replace(strRep, strDes)\n\n  return resStr\n}\n\nexport function handleExplorerForTx(blockchain, txHash) {\n  if (blockchain === \"ETH\") {\n    return `https://etherscan.io/tx/${txHash}`\n  } else if (blockchain === \"ETC\") {\n    return `https://blockscout.com/etc/mainnet/tx/${txHash}`\n  }\n}\n\nexport function handleExplorerForAddress(blockchain, address) {\n  if (blockchain === \"ETH\") {\n    return `https://etherscan.io/address/${address}`\n  } else if (blockchain === \"ETC\") {\n    return `https://blockscout.com/etc/mainnet/address/${address}`\n  }\n}\n\nexport function handleExplorerForTokenAddress(blockchain, tokenAddress) {\n  if (blockchain === \"ETH\") {\n    return `https://etherscan.io/token/${tokenAddress}`\n  } else if (blockchain === \"ETC\") {\n    return `https://blockscout.com/etc/mainnet/tokens/${tokenAddress}`\n  }\n}\n\nexport function handleTotalAmount (price, total) {\n  const bdPrice = new BigNumber(price)\n  const bdTotal = new BigNumber(total)\n\n  return bdTotal.times(bdPrice)\n}\n","import React, {Component} from 'react';\nimport { handleExplorerForTx, handleExplorerForTokenAddress, handleExplorerForAddress } from '../../utils/Helpers';\nimport { Dot } from 'react-animated-dots';\n\nimport { TOKEN_ADDRESS, TOKEN_NAME, TOKEN_SYMBOL, TOKEN_NETWORK, EXCHANGE_CONTRACT } from '../../config'\n\nclass ERC20Approval extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      approvalPending: false,\n      txHash: '',\n    };\n  }\n\n  async registerToken(e) {\n    e.preventDefault();\n\n    let transactionHash = await this.props.registerToken(EXCHANGE_CONTRACT, TOKEN_ADDRESS)\n\n    if (transactionHash) {\n      this.setState( { approvalPending: true, txHash: transactionHash } )\n    }\n  }\n\n  render () {\n    let activeAccountAddress = this.props.activeAccountAddress\n\n    return (\n      <div>\n        <div className='card-head'>\n          <span className='card-sub-title text-light font-mid'>Quick Start</span>\n          <h4 className='card-title'>ERC20 Token Approval</h4>\n        </div>\n        <div className='card-text'>\n\n          { !this.state.approvalPending && <p>Welcome! As this is your first time trading <a className='dark-url' target='_blank' rel='noopener noreferrer' href={handleExplorerForTokenAddress(TOKEN_NETWORK, TOKEN_ADDRESS)}>{TOKEN_NAME} [{TOKEN_SYMBOL}]</a> from <a className='dark-url' target='_blank' rel='noopener noreferrer' href={handleExplorerForAddress(TOKEN_NETWORK, activeAccountAddress)}>this wallet address</a>, you will need to submit an <a className='dark-url' href='https://www.saturn.network/blog/erc20-approve-explained/' target='_blank' rel='noopener noreferrer'>ERC20 Approve</a> transaction before being able to continue.</p> }\n          { !this.state.approvalPending && <p>The good news is <b><u>we automatically set the approval to the token’s total supply, which means you will only ever need to do this once</u></b>.</p> }\n          { !this.state.approvalPending && <p>Essentially, an <a className='dark-url' href='https://www.saturn.network/blog/erc20-approve-explained/' target='_blank' rel='noopener noreferrer'>ERC20 Token Approval</a> is required to allow you to interact with our exchange’s smart contract that you can create orders or fill existing ones.</p> }\n          { this.state.approvalPending && <p><a className='dark-url' href='https://www.saturn.network/blog/erc20-approve-explained/' target='_blank' rel='noopener noreferrer'>ERC20 Token Approve</a> transaction has been submitted and is now <a className='dark-url' href={handleExplorerForTx(TOKEN_NETWORK, this.state.txHash)} target='_blank' rel='noopener noreferrer'>pending</a>. As soon as your transaction is confirmed by the network, you will be able to continue.</p>}\n\n          { !this.state.approvalPending && <div className='buttons-wrapper'>\n            <button onClick={(e) => this.registerToken(e)} className='btn btn-success-alt btn-between w-100'><i className='fas fa-unlock icon-margin-right-10'></i> Approve {TOKEN_NAME} [{TOKEN_SYMBOL}]</button>\n          </div> }\n\n          { this.state.approvalPending && <div className='buttons-wrapper'>\n            <div className='action-button'><a href={handleExplorerForTx(TOKEN_NETWORK, this.state.txHash)} target='_blank' rel='noopener noreferrer' className='btn btn-dark btn-between w-100'><i className='fas fa-search icon-margin-right-10'></i> <span className='responsive-button-label'>This transaction is pending confirmation</span> <Dot>.</Dot><Dot>.</Dot><Dot>.</Dot></a></div>\n          </div> }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ERC20Approval\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport CreateOrderForm from './CreateOrderForm'\n\nimport InstallWallet from '../Shared/InstallWallet'\nimport LoginToWallet from '../Shared/LoginToWallet'\nimport NullBalance   from '../Shared/NullBalance'\nimport WrongNetwork  from '../Shared/WrongNetwork'\nimport ERC20Approval from '../Shared/ERC20Approval'\n\nimport { getBalanceInEther, getBalance } from '../../utils/Utils'\n\nimport { registerToken,\n         checkCoinAllowance,\n         createOrderErc223,\n         createOrderErc20 } from '../../actions'\n\nimport { TOKEN_ADDRESS,\n         TOKEN_DECIMALS,\n         TOKEN_STANDARD,\n         TOKEN_NETWORK,\n         EXCHANGE_CONTRACT } from '../../config'\n\nimport IosPlanet from 'react-ionicons/lib/IosPlanet'\n\nclass CreateOrderModal extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      etherBalance: null,\n      tokenBalance: null,\n      erc20ApprovalRequired: false\n    }\n  }\n\n  componentDidMount() {\n    this.fetchAccountBalances = setInterval(this.loadDynamicData.bind(this), 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchAccountBalances)\n  }\n\n  async loadAccountBalance() {\n    let activeAccountAddress = this.props.activeAccountAddress\n    let web3                 = this.props.web3\n\n    if (web3 && activeAccountAddress) {\n      let tokenBalance = await getBalance(TOKEN_ADDRESS, web3, activeAccountAddress)\n      let etherBalance = await getBalanceInEther(activeAccountAddress, web3)\n\n      let formattedTokenBalance = tokenBalance.div(10 ** TOKEN_DECIMALS).toFixed(TOKEN_DECIMALS)\n\n      this.setState({ tokenBalance: formattedTokenBalance, etherBalance: etherBalance })\n    }\n  }\n\n  async loadDynamicData() {\n    let web3 = this.props.web3\n    let activeAccountAddress = this.props.activeAccountAddress\n\n    if (web3 && activeAccountAddress) {\n      await this.setApprovalFlag()\n      await this.loadAccountBalance()\n    }\n  }\n\n  async setApprovalFlag() {\n    let web3 = this.props.web3\n    let activeAccountAddress = this.props.activeAccountAddress\n\n    if (web3 && activeAccountAddress) {\n      if (TOKEN_STANDARD === 'ERC20' && EXCHANGE_CONTRACT) {\n        let tokenAllowance = await this.props.checkCoinAllowance(EXCHANGE_CONTRACT, TOKEN_ADDRESS)\n\n        if (Number(tokenAllowance) <= 0) {\n          this.setState( { erc20ApprovalRequired: true })\n        } else {\n          this.setState( { erc20ApprovalRequired: false })\n        }\n      }\n    }\n  }\n\n  render() {\n    let web3                 = this.props.web3\n    let activeAccountAddress = this.props.activeAccountAddress\n    let isConnected          = this.props.isConnected\n    let nullBalance          = (this.state.etherBalance && Number(this.state.etherBalance) === 0)\n    let networkName          = this.props.networkName\n    let wrongNetwork         = ((networkName === 'mainnet' && TOKEN_NETWORK !== 'ETH') || (networkName === 'classic' && TOKEN_NETWORK !== 'ETC'))\n\n    let tokenBalance = this.state.tokenBalance\n    let etherBalance = this.state.etherBalance\n\n    let ordersData = this.props.orders[`${TOKEN_ADDRESS}`]\n\n    let bestBuyPrice = undefined\n    let bestSellPrice = undefined\n\n    if (ordersData && !ordersData.data.isSync) {\n      if (ordersData.data.buys && ordersData.data.buys.length > 0) {\n        bestSellPrice = Math.min.apply(null, ordersData.data.buys.map( (x) => x.price ))\n      }\n\n      if (ordersData.data.sells && ordersData.data.sells.length > 0) {\n        bestBuyPrice = Math.max.apply(null, ordersData.data.sells.map( (x) => x.price ))\n      }\n    }\n\n    return (\n      <div className='row align-items-center justify-content-center'>\n        <div className={'col-lg-12 col-md-12 col-sm-12'}>\n          <div className={`content-area card card-secondary card-text-light modal-no-margin`}>\n            <div className='card-innr'>\n              { !web3 && <InstallWallet/> }\n              { (web3 && !activeAccountAddress) && <LoginToWallet/> }\n              { (web3 && isConnected && activeAccountAddress && nullBalance) && <NullBalance activeAccountAddress={activeAccountAddress}/> }\n              { (web3 && isConnected && activeAccountAddress && !nullBalance && wrongNetwork) && <WrongNetwork /> }\n              { (web3 && isConnected && activeAccountAddress && !nullBalance && !wrongNetwork &&\n                  this.state.erc20ApprovalRequired) &&\n                  <ERC20Approval activeAccountAddress={activeAccountAddress}\n                                 networkName={networkName}\n                                 registerToken={this.props.registerToken} /> }\n\n              { (web3 && isConnected && activeAccountAddress && !nullBalance && !wrongNetwork && !this.state.erc20ApprovalRequired) &&\n                <div className='min-height-223'>\n                  { (tokenBalance === null || etherBalance === null) && <div className='card__refresh_saturn_dark'><IosPlanet fontSize='66px' color='#fff' beat={true} /></div> }\n\n\n                  { tokenBalance !== null && etherBalance !== null &&\n                    <div>\n\n                      <CreateOrderForm web3={web3}\n                                      activeAccountAddress={activeAccountAddress}\n                                      etherBalance={etherBalance}\n                                      tokenBalance={tokenBalance}\n                                      networkName={networkName}\n                                      bestSellPrice={bestSellPrice}\n                                      bestBuyPrice={bestBuyPrice}\n                                      createOrderErc223={this.props.createOrderErc223}\n                                      createOrderErc20={this.props.createOrderErc20} />\n                  </div>\n                  }\n                </div>\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    network: state.network,\n    isConnected: state.network.isConnected,\n    orders: state.orderBook.orders,\n    web3: state.network.web3,\n    networkName: state.network.networkName,\n    activeAccountAddress: state.network.activeAccountAddress\n  }\n}\n\nconst mapActionCreators = {\n  registerToken,\n  checkCoinAllowance,\n  createOrderErc20,\n  createOrderErc223\n}\n\nexport default connect(mapStateToProps, mapActionCreators)(CreateOrderModal)\n","import React, {Component} from 'react'\nimport { InputGroup } from 'reactstrap'\nimport NumberFormat from 'react-number-format'\nimport { debounce } from 'debounce'\nimport { handleTotalPrice, handleTotalPriceAfterFees, handleTotalAmount } from '../../utils/TokenUtil'\nimport { handleExplorerForTx } from '../../utils/Helpers'\nimport { fetchTxReceiptByTransactionHash } from '../../actions/FetchTxReceipt'\n\nimport { Dot } from 'react-animated-dots'\nimport IosPlanet from 'react-ionicons/lib/IosPlanet'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExchangeAlt, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport { BLOCKCHAIN_LOGO, TOKEN_STANDARD, TOKEN_DECIMALS, TOKEN_NAME, TOKEN_SYMBOL, TOKEN_ADDRESS, TOKEN_LOGO, TOKEN_NETWORK, ETHER_ADDRESS } from '../../config'\n\nvar numbro = require('numbro')\n\nclass OrderForm extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      buyToken: null,\n      sellToken: null,\n      orderAmount: null,\n      totalAmount: null,\n      etherAmount: null,\n      totalFees: null,\n      tradeMining: null,\n      orderBalanceError: '',\n      walletBalanceError: '',\n      etherInputActive: false,\n      tokenInputActive: false,\n      transactionHash: '',\n      orderType: '',\n      orderBlockchain: '',\n      txReceipt: '',\n      tokenAllowance: 0,\n      tokenSupply: 0,\n      remainingAmountBalance: null\n    }\n\n    this.handleAmountChange = debounce(this.handleAmountChange, 600)\n    this.signTransaction = this.signTransaction.bind(this)\n    this.calculateEthereumPrefill = this.calculateEthereumPrefill.bind(this)\n  }\n\n  async calculateEthereumPrefill (percentage) {\n    let data            = this.props.selectedOrder.data\n    let orderType       = data.type\n    let orderBalance    = data.balance\n\n    if (orderType === 'BUY') {\n      let tokenBalance = this.props.tokenBalance\n\n      let desiredTokenAmount\n\n      if (percentage === 90) {\n        desiredTokenAmount = tokenBalance\n      } else {\n        desiredTokenAmount = tokenBalance / 100 * percentage\n      }\n\n      if (desiredTokenAmount > Number(orderBalance)) {\n        await this.handleAmountChange(orderBalance)\n      } else {\n        await this.handleAmountChange(desiredTokenAmount)\n      }\n    } else {\n      let availableInEther = await handleTotalPrice(numbro(data.price).value(), orderBalance)\n      let desiredEtherAmount = this.props.etherBalance / 100 * percentage\n\n      if (desiredEtherAmount > availableInEther) {\n        await this.handleAmountChange(availableInEther)\n      } else {\n        await this.handleAmountChange(desiredEtherAmount)\n      }\n    }\n  }\n\n  async signTransaction () {\n    let web3 = this.props.web3\n\n    if (web3) {\n      let data                 = this.props.selectedOrder.data\n      let orderType            = data.type\n\n      if (orderType === 'BUY') {\n        this.executeTransaction(this.state.orderAmount,\n          this.state.totalAmount,\n          TOKEN_ADDRESS,\n          TOKEN_NAME,\n          TOKEN_DECIMALS)\n      } else {\n        this.executeTransaction(this.state.orderAmount,\n          this.state.totalAmount,\n          ETHER_ADDRESS,\n          TOKEN_NAME,\n          18)\n      }\n    }\n  }\n\n  async loadTransactionData() {\n    if (this.state.transactionHash !== '') {\n      let data            = this.props.selectedOrder.data\n      let orderBlockchain = data.blockchain\n\n      let txReceipt = await fetchTxReceiptByTransactionHash(this.state.transactionHash, orderBlockchain)\n\n      if (txReceipt && txReceipt !== this.state.txReceipt) {\n        this.setState({ txReceipt: txReceipt })\n      }\n    }\n  }\n\n  async executeTransaction(orderAmount, totalAmount, buyTokenAddress, buyTokenName, buyTokenDecimals) {\n    let web3 = this.props.web3\n\n    if (web3) {\n      let data                 = this.props.selectedOrder.data\n      let orderType            = data.type\n      let orderId              = data.order_id\n      let orderContract        = data.contract\n\n      let orderAmount = this.state.orderAmount\n      let totalAmount = this.state.totalAmount\n\n      let transactionHash\n\n      if (orderType === 'BUY') {\n        transactionHash = await this.props.executeOrder(TOKEN_STANDARD, orderContract, orderId, orderAmount, buyTokenAddress, buyTokenName, buyTokenDecimals)\n      } else {\n        transactionHash = await this.props.executeOrder(TOKEN_STANDARD, orderContract, orderId, totalAmount, buyTokenAddress, buyTokenName, buyTokenDecimals)\n      }\n\n      if (transactionHash) {\n        this.setState({ transactionHash: transactionHash, orderAmount: orderAmount, totalAmount: totalAmount })\n      }\n    }\n  }\n\n  async handleAmountChange (amountValue) {\n    if (amountValue) {\n      let enteredAmount = numbro(amountValue).value()\n\n      if (enteredAmount !== 0) {\n        let fees\n        let feesFromWei\n        let tradeMining\n        let totalAmount\n        let totalFromWei\n        let orderAmount\n\n        let web3                = this.props.web3\n        let data                = this.props.selectedOrder.data\n        let orderType           = data.type\n        let orderContract       = data.contract\n        let orderId             = data.order_id\n        let orderBlockchain     = data.blockchain\n        let pricePerUnit        = numbro(data.price).value()\n\n        if (this.state.buyToken && this.state.buyToken.address === ETHER_ADDRESS) {\n\n          if (orderType === 'SELL') {\n            orderAmount = await handleTotalAmount(pricePerUnit, enteredAmount)\n            fees = await this.props.calculateFees(orderContract, enteredAmount, orderId)\n\n            if (fees) { tradeMining = await this.props.tradeMiningAmount(orderContract, fees, orderId) }\n\n            let desiredAmount = orderAmount * (10 ** TOKEN_DECIMALS)\n            let totalAmountToBuy = await this.props.getBuyTokenAmount(orderContract, desiredAmount, orderId)\n\n            if (totalAmountToBuy) {\n              let totalAmountToBuyString = totalAmountToBuy.toString()\n\n              feesFromWei  = await web3.fromWei(fees, 'ether')\n              totalFromWei = await web3.fromWei(totalAmountToBuyString, 'ether')\n\n              await this.setState({ orderAmount: Number(orderAmount).noExponents(),\n                                    etherAmount: Number(enteredAmount).noExponents(),\n                                    totalFees:   Number(feesFromWei).noExponents(),\n                                    tradeMining: Number(tradeMining).noExponents(),\n                                    orderType:       orderType,\n                                    orderBlockchain: orderBlockchain,\n                                    totalAmount: totalFromWei })\n            }\n          } else {\n            orderAmount = await handleTotalAmount(pricePerUnit, enteredAmount)\n\n            fees = await this.props.calculateFeesToken(orderContract, orderAmount, TOKEN_DECIMALS, orderId)\n\n            feesFromWei = await this.props.web3.fromWei(fees, 'ether')\n\n            if (fees) { tradeMining = await this.props.tradeMiningAmount(orderContract, fees, orderId) }\n\n            await this.setState({ orderAmount: Number(orderAmount).noExponents(),\n                                  etherAmount: Number(enteredAmount).noExponents(),\n                                  totalFees:   Number(feesFromWei).noExponents(),\n                                  tradeMining: Number(tradeMining).noExponents(),\n                                  orderType:       orderType,\n                                  orderBlockchain: orderBlockchain,\n                                  totalAmount: enteredAmount })\n          }\n        } else {\n          if (orderType === 'SELL') {\n            totalAmount = await handleTotalPrice(pricePerUnit, enteredAmount)\n\n            fees = await this.props.calculateFees(orderContract, totalAmount, orderId)\n\n            feesFromWei = await web3.fromWei(fees, 'ether')\n\n            if (fees) {\n              tradeMining = await this.props.tradeMiningAmount(orderContract, fees, orderId)\n            }\n\n\n            let desiredAmount = enteredAmount * (10 ** TOKEN_DECIMALS)\n            let totalAmountToBuy = await this.props.getBuyTokenAmount(orderContract, desiredAmount, orderId)\n\n            if (totalAmountToBuy) {\n              let totalAmountToBuyString = totalAmountToBuy.toString()\n\n              totalFromWei =  await web3.fromWei(totalAmountToBuyString, 'ether')\n\n              await this.setState({ orderAmount: enteredAmount,\n                                    etherAmount: Number(totalAmount).noExponents(),\n                                    totalFees:   Number(feesFromWei).noExponents(),\n                                    tradeMining: Number(tradeMining).noExponents(),\n                                    orderType:       orderType,\n                                    orderBlockchain: orderBlockchain,\n                                    totalAmount: totalFromWei })\n            }\n          } else {\n            fees = await this.props.calculateFeesToken(orderContract, enteredAmount, TOKEN_DECIMALS, orderId)\n            feesFromWei = await this.props.web3.fromWei(fees, 'ether')\n\n            if (fees) {\n              tradeMining = await this.props.tradeMiningAmount(orderContract, fees, orderId)\n\n              if (tradeMining) {\n                totalAmount = await handleTotalPriceAfterFees(pricePerUnit, enteredAmount, feesFromWei)\n\n                let totalPrice = await handleTotalPrice(pricePerUnit, enteredAmount)\n\n                await this.setState({ orderAmount: enteredAmount,\n                                      etherAmount: Number(totalPrice).noExponents(),\n                                      totalFees:   Number(feesFromWei).noExponents(),\n                                      tradeMining: Number(tradeMining).noExponents(),\n                                      orderType:       orderType,\n                                      orderBlockchain: orderBlockchain,\n                                      totalAmount: Number(totalAmount).noExponents() })\n              }\n            }\n          }\n        }\n      }\n\n      await this.recalculateErrors()\n    }\n  }\n\n  async recalculateErrors () {\n    let data                 = this.props.selectedOrder.data\n    let orderType            = data.type\n    let orderBalance         = data.balance\n\n    let etherBalance = this.props.etherBalance\n    let tokenBalance = this.props.tokenBalance\n\n    if (Number(this.state.orderAmount) > Number(orderBalance)) {\n      this.setState({orderBalanceError: 'Maximum available amount for this order is ' + orderBalance + ' ' + TOKEN_SYMBOL })\n    } else {\n      this.setState({orderBalanceError: ''})\n    }\n\n    if (orderType === 'SELL') {\n      if (Number(this.state.totalAmount) > Number(etherBalance)) {\n        this.setState({walletBalanceError: 'Insufficient funds, your wallet balance is ' + etherBalance + ' ' + TOKEN_NETWORK })\n      } else {\n        this.setState({walletBalanceError: ''})\n      }\n    }\n\n    if (orderType === 'BUY') {\n      if (Number(this.state.orderAmount) > Number(tokenBalance)) {\n        this.setState({walletBalanceError: 'Insufficient funds, your wallet balance is ' + tokenBalance + ' ' + TOKEN_SYMBOL })\n      } else {\n        this.setState({walletBalanceError: ''})\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.checkTxStatus = setInterval(this.loadTransactionData.bind(this), 5000)\n\n    this.setTokensData()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.checkTxStatus)\n  }\n\n  setTokensData() {\n    let data            = this.props.selectedOrder.data\n    let buyToken        = data.buytoken\n    let sellToken       = data.selltoken\n\n    this.setState({ buyToken: buyToken, sellToken: sellToken })\n  }\n\n  render() {\n    let data            = this.props.selectedOrder.data\n    let orderType       = data.type\n    let buyToken        = data.buytoken\n    let sellToken       = data.selltoken\n    let orderBlockchain = data.blockchain\n    let rawPrice        = data.price\n\n    let targetTokenLogo = TOKEN_LOGO\n\n    let ethPriceMaskDecimal = 18\n    let targetTokenAmountMaskDecimal = TOKEN_DECIMALS\n    let tokenBalance = this.props.tokenBalance\n\n    return (\n      <div>\n        { this.state.transactionHash === '' && <div>\n          <div className='card-head text-center'>\n            {orderType === 'BUY' && <h4 className='card-title'>Sell {buyToken.symbol} for {sellToken.symbol}</h4> }\n            {orderType === 'SELL' && <h4 className='card-title'>Buy {sellToken.symbol} for {buyToken.symbol}</h4> }\n          </div>\n\n            <div className='row'>\n              <div className='col-lg-5 col-md-12 col-sm-12 token-bonus text-center token-bonus-sale'>\n                <span className='input-title font-bold'>You Send</span>\n\n                {orderType === 'BUY' && <div className='input-wrapper'>\n                    <InputGroup>\n                      <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                     thousandSeparator={true}\n                                     allowNegative={false}\n                                     decimalScale={targetTokenAmountMaskDecimal}\n                                     value={this.state.orderAmount}\n                                     onChange={event => { event.persist(); this.setState({orderAmount: event.target.value, totalAmount: null});  this.handleAmountChange(event.target.value) }} />\n                    </InputGroup>\n\n                    <div className='input-currency'>\n                      <img src={`${targetTokenLogo}`} alt={TOKEN_NAME} height='20' width='20' /> {TOKEN_SYMBOL}\n                    </div>\n                  </div>}\n\n                  {orderType === 'SELL' && <div className='input-wrapper'>\n                    <InputGroup>\n                      <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                     thousandSeparator={true}\n                                     allowNegative={false}\n                                     decimalScale={ethPriceMaskDecimal}\n                                     value={this.state.etherAmount}\n                                     onChange={event => { event.persist(); this.setState({etherAmount: event.target.value, orderAmount: null}); this.handleAmountChange(event.target.value) }} />\n                    </InputGroup>\n\n                    <div className='input-currency'>\n                      <img src={`${BLOCKCHAIN_LOGO}`} alt={orderBlockchain} height='20' width='20' /> {orderBlockchain}\n                    </div>\n                  </div> }\n\n                <div className='row pdt-1x'>\n                  <div className='col-lg-12 col-md-12 quick-buttons text-right'>\n                    <span className='btn btn-xs btn-light mgr-0-5x' onClick={() => this.calculateEthereumPrefill(25)}>25%</span>\n                    <span className='btn btn-xs btn-light mgr-0-5x' onClick={() => this.calculateEthereumPrefill(50)}>50%</span>\n                    <span className='btn btn-xs btn-light' onClick={() => this.calculateEthereumPrefill(90)}>100%</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className='col-lg-2 d-none d-lg-block token-bonus'>\n                <div className='text-center mgt-3-5x'><FontAwesomeIcon icon={faExchangeAlt} size='lg' color='#fff' /></div>\n              </div>\n\n              <div className='col-lg-2 col-md-12 col-sm-12 d-lg-none align-items-center justify-content-center'>\n                <div className='text-center'><FontAwesomeIcon icon={faExchangeAlt} rotation={90} size='lg' color='#fff' /></div>\n              </div>\n\n\n              <div className='col-lg-5 col-md-12 col-sm-12 token-bonus text-center token-bonus-sale'>\n                <span className='input-title font-bold'>You Get</span>\n\n                {orderType === 'BUY' &&\n                  <div className='input-wrapper'>\n                    <InputGroup>\n                      <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                     thousandSeparator={true}\n                                     allowNegative={false}\n                                     decimalScale={ethPriceMaskDecimal}\n                                     disabled value={this.state.totalAmount} />\n                    </InputGroup>\n\n                    <div className='input-currency'>\n                      <img src={`${BLOCKCHAIN_LOGO}`} alt={orderBlockchain} height='20' width='20' /> {orderBlockchain}\n                    </div>\n                  </div> }\n\n              {orderType === 'SELL' &&\n                <div className='input-wrapper'>\n                    <InputGroup>\n                      <NumberFormat className='input-bordered input-bordered-dark-mode'\n                                     thousandSeparator={true}\n                                     allowNegative={false}\n                                     decimalScale={targetTokenAmountMaskDecimal}\n                                     disabled value={this.state.orderAmount} />\n                    </InputGroup>\n\n                    <div className='input-currency'>\n                      { targetTokenLogo ? <img\n                        alt={`${TOKEN_SYMBOL} logo`}\n                        src={targetTokenLogo} height='20' width='20' /> : '' } {TOKEN_SYMBOL}\n                    </div>\n                  </div> }\n\n                  <div className='pdt-1x text-small text-light text-left'>\n                  {  orderType === 'SELL' && <span>Balance: {this.props.etherBalance} {orderBlockchain}</span> }\n                  {  orderType === 'BUY' && <span>Balance: {Number(tokenBalance).noExponents()} {TOKEN_SYMBOL}</span> }\n                  <br/>\n                  <span>Price: 1 {TOKEN_SYMBOL} = {rawPrice} {orderBlockchain}</span>\n                </div>\n              </div>\n            </div>\n            <div className='row align-items-center justify-content-center'>\n              <div className='col-lg-8 text-center'>\n                <div className='token-contribute'>\n                  { this.state.orderBalanceError !== '' && <div>\n                      <i className='fas fa-times-circle text-danger pdr-0-5x'></i>\n                      <span className='note-text text-danger'>{this.state.orderBalanceError}</span>\n                    </div> }\n\n                  { this.state.walletBalanceError !== '' && <div>\n                      <i className='fas fa-times-circle text-danger pdr-0-5x'></i>\n                      <span className='note-text text-danger'>{this.state.walletBalanceError}</span>\n                    </div> }\n                  </div>\n              </div>\n\n              <div className='col-lg-12 buttons-wrapper pdt-2x'>\n                <div className={`action-button`}><button onClick={() => this.signTransaction()} className='btn btn-success btn-between w-100'>Exchange Now <i className='fas fa-signature icon-margin-left-10'></i></button></div>\n              </div>\n            </div>\n        </div> }\n        { this.state.transactionHash !== '' && <div>\n            <div className='status'>\n              <IosPlanet fontSize='66px' color={ this.state.txReceipt === '' ? '#fff' : '#009f65'} beat={this.state.txReceipt === '' } />\n\n              <span className='status-text large'>Thank you for choosing Saturn Network</span>\n              <p className='px-md-5'></p>\n            </div>\n\n            { <div>\n                <ul className='data-details-list'>\n                    <li>\n                      <div className='data-details-head'>Tx Hash</div>\n                      <div className='data-details-des'><strong><a className='dark-url' href={handleExplorerForTx(orderBlockchain, this.state.transactionHash)} target='_blank' rel='noreferrer noopener'>{this.state.transactionHash}</a></strong></div>\n                    </li>\n\n                    <li>\n                      <div className='data-details-head'>Tx Type</div>\n                      <div className='data-details-des'>\n                        {orderType === 'BUY' && <strong>Sell {buyToken.symbol} for {sellToken.symbol}</strong> }\n                        {orderType === 'SELL' && <strong>Buy {sellToken.symbol} for {buyToken.symbol}</strong> }\n                      </div>\n                    </li>\n\n                    <li>\n                      <div className='data-details-head'>Price Per Token</div>\n                      <div className='data-details-des'><strong>1 {TOKEN_SYMBOL} = {data.price} {orderBlockchain}</strong></div>\n                    </li>\n\n                    <li>\n                      <div className='data-details-head'>Total Price</div>\n                      <div className='data-details-des'>{orderType === 'SELL' && <strong>{this.state.totalAmount} {orderBlockchain} = <NumberFormat value={this.state.orderAmount} displayType={'text'} decimalScale={targetTokenAmountMaskDecimal} /> {TOKEN_SYMBOL}</strong> }\n                        {orderType === 'BUY' && <strong><NumberFormat value={this.state.orderAmount} displayType={'text'} decimalScale={targetTokenAmountMaskDecimal} /> {TOKEN_SYMBOL} = {this.state.totalAmount} {orderBlockchain}</strong> }\n                      </div>\n                    </li>\n\n                    <li>\n                      <div className='data-details-head'>Trade Mining Bonus</div>\n                      <div className='data-details-des'><strong>{this.state.tradeMining} {this.state.orderBlockchain === 'ETC' ? 'STRN' : 'SATURN'}</strong></div>\n                    </li>\n                    <li>\n                      <div className='data-details-head'>Exchange Fee (0.25%)</div>\n                      <div className='data-details-des'><strong>{`${this.state.totalFees} ${this.state.orderBlockchain}`}</strong></div>\n                    </li>\n                    <li>\n                      <div className='data-details-head'>Gas Used</div>\n                      <div className='data-details-des'><strong>{ this.state.txReceipt ? <span>{Number(this.state.txReceipt.gasused)}</span> : <span>Pending <Dot>.</Dot><Dot>.</Dot><Dot>.</Dot></span>  }</strong></div>\n                    </li>\n                    <li>\n                      <div className='data-details-head'>Actual Tx Cost / Fee</div>\n                      <div className='data-details-des'><strong>{ this.state.txReceipt ? <span>{`${this.state.txReceipt.txprice} ${this.state.orderBlockchain}`}</span> : <span>Pending <Dot>.</Dot><Dot>.</Dot><Dot>.</Dot></span> }</strong></div>\n                    </li>\n                </ul>\n            </div>\n          }\n        </div> }\n        { this.state.transactionHash === '' && <div className='pay-notes'>\n            <div className='note note-plane note-light note-md text-light font-italic'>\n              <FontAwesomeIcon icon={faInfoCircle} />\n              <p>Tokens will be received directly in your wallet once your transaction has been successfully confirmed by the network.</p>\n            </div>\n            { this.state.transactionHash === '' && <div className='note note-plane note-light note-md text-light font-italic'>\n              <FontAwesomeIcon icon={faInfoCircle} />\n              <p>By clicking the 'Exchange Now' button you are agreeing to pay a 0.25% trade fee {this.state.totalFees && `(${this.state.totalFees} ${orderBlockchain})`}.</p>\n            </div> }\n            { this.state.transactionHash === '' && <div className='note note-plane note-light note-md text-light font-italic'>\n              <FontAwesomeIcon icon={faInfoCircle} />\n              <p>You will automatically receive a trade mining reward for completing a trade.</p>\n            </div> }\n        </div> }\n      </div>\n    )\n  }\n}\n\nexport default OrderForm\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nimport ExecuteOrderForm from './ExecuteOrderForm'\nimport InstallWallet from '../Shared/InstallWallet'\nimport LoginToWallet from '../Shared/LoginToWallet'\nimport NullBalance   from '../Shared/NullBalance'\nimport WrongNetwork  from '../Shared/WrongNetwork'\nimport ERC20Approval from '../Shared/ERC20Approval'\n\nimport IosPlanet from 'react-ionicons/lib/IosPlanet'\n\nimport { getBalanceInEther, getBalance } from '../../utils/Web3Util'\nimport { connectNetwork,\n         fetchOrder,\n         executeOrder,\n         registerToken,\n         checkCoinAllowance } from '../../actions'\n\nimport { getBuyTokenAmount,\n         tradeMiningAmount,\n         calculateFees,\n         remainingAmount,\n         isOrderActive,\n         calculateFeesToken } from '../../utils/ExchangeUtil'\n\nimport { TOKEN_ADDRESS,\n         TOKEN_DECIMALS,\n         TOKEN_STANDARD,\n         TOKEN_NETWORK,\n         EXCHANGE_CONTRACT,\n         TOKEN_SYMBOL} from '../../config'\n\nclass ExecuteOrderModal extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      etherBalance: null,\n      tokenBalance: null,\n      erc20ApprovalRequired: false\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchOrder(TOKEN_NETWORK, this.props.txHash)\n    this.fetchAccountBalances = setInterval(this.loadDynamicData.bind(this), 1000)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.txHash !== this.props.txHash) {\n      this.props.fetchOrder(TOKEN_NETWORK, this.props.txHash)\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchAccountBalances)\n  }\n\n  async loadAccountBalance() {\n    let activeAccountAddress = this.props.activeAccountAddress\n    let web3                 = this.props.web3\n\n    if (web3 && activeAccountAddress) {\n      let tokenBalance = await getBalance(TOKEN_ADDRESS, web3, activeAccountAddress)\n      let etherBalance = await getBalanceInEther(activeAccountAddress, web3)\n\n      let formattedTokenBalance = tokenBalance.div(10 ** TOKEN_DECIMALS).toFixed(TOKEN_DECIMALS)\n\n      this.setState({ tokenBalance: formattedTokenBalance, etherBalance: etherBalance })\n    }\n  }\n\n  async loadDynamicData() {\n    let web3 = this.props.web3\n    let activeAccountAddress = this.props.activeAccountAddress\n\n    if (web3 && activeAccountAddress) {\n      await this.setApprovalFlag()\n      await this.loadAccountBalance()\n    }\n  }\n\n  async setApprovalFlag() {\n    let web3 = this.props.web3\n    let activeAccountAddress = this.props.activeAccountAddress\n\n    let orderData = this.props.selectedOrder\n\n    if (orderData && !orderData.isSync) {\n      let orderType = orderData.data.type\n\n      if (web3 && activeAccountAddress) {\n        if (TOKEN_STANDARD === 'ERC20' && EXCHANGE_CONTRACT && orderType === 'BUY') {\n          let tokenAllowance = await this.props.checkCoinAllowance(EXCHANGE_CONTRACT, TOKEN_ADDRESS)\n\n          if (Number(tokenAllowance) <= 0) {\n            this.setState( { erc20ApprovalRequired: true })\n          } else {\n            this.setState( { erc20ApprovalRequired: false })\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    let web3                 = this.props.web3\n    let isConnected          = this.props.isConnected\n    let activeAccountAddress = this.props.activeAccountAddress\n    let nullBalance          = (this.state.etherBalance && Number(this.state.etherBalance) === 0)\n    let networkName          = this.props.networkName\n\n    let wrongNetwork         = ((networkName === 'mainnet' && TOKEN_NETWORK !== 'ETH') || (networkName === 'classic' && TOKEN_NETWORK !== 'ETC'))\n\n    let tokenBalance = this.state.tokenBalance\n    let etherBalance = this.state.etherBalance\n\n    let selectedOrder = this.props.selectedOrder\n    let orderStatus\n\n    if (selectedOrder !== undefined && !selectedOrder.isSync) {\n      if (selectedOrder.data.active) {\n        orderStatus = 'Active'\n      } else {\n        if (selectedOrder.data.trades.length > 0) {\n          orderStatus = 'Fulfilled'\n        } else {\n          orderStatus = 'Cancelled'\n        }\n      }\n    }\n\n    return (\n      <div className='row align-items-center justify-content-center'>\n        <div className='col-lg-12 col-md-12 col-sm-12'>\n          <div className='card card-secondary card-text-light modal-no-margin'>\n            <div className='card-innr'>\n              { !web3 && <InstallWallet/> }\n              { (web3 && !activeAccountAddress) && <LoginToWallet/> }\n              { (web3 && isConnected && activeAccountAddress && nullBalance) && <NullBalance activeAccountAddress={activeAccountAddress}/> }\n              { (web3 && isConnected && activeAccountAddress && !nullBalance && wrongNetwork) && <WrongNetwork /> }\n              { (web3 && isConnected && activeAccountAddress && !nullBalance && !wrongNetwork &&\n                  this.state.erc20ApprovalRequired) &&\n                  <ERC20Approval activeAccountAddress={activeAccountAddress}\n                                 networkName={networkName}\n                                 registerToken={this.props.registerToken} /> }\n\n              { (web3 && isConnected && activeAccountAddress && !nullBalance && !wrongNetwork && !this.state.erc20ApprovalRequired) &&\n                <div className='min-height-223'>\n                  { (tokenBalance === null || etherBalance === null || !selectedOrder || selectedOrder.isSync) && <div className='card__refresh_saturn_dark'><IosPlanet fontSize='66px' color='#fff' beat={true} /></div> }\n\n\n                  { tokenBalance !== null && etherBalance !== null &&\n                    <div>\n                      { selectedOrder && !selectedOrder.isSync && selectedOrder.data.active && <ExecuteOrderForm web3={web3}\n                              activeAccountAddress={activeAccountAddress}\n                              networkName={networkName}\n                              tokenBalance={tokenBalance}\n                              etherBalance={etherBalance}\n                              selectedOrder={selectedOrder}\n                              calculateFees={this.props.calculateFees}\n                              remainingAmount={this.props.remainingAmount}\n                              tradeMiningAmount={this.props.tradeMiningAmount}\n                              getBuyTokenAmount={this.props.getBuyTokenAmount}\n                              calculateFeesToken={this.props.calculateFeesToken}\n                              executeOrder={this.props.executeOrder} /> }\n\n\n                      { selectedOrder && !selectedOrder.isSync && !selectedOrder.data.active &&\n                        <div className='d-none d-lg-block'>\n                          <a href='/' className='btn btn-success btn-xl btn-between w-100'>This order is {orderStatus}, get back to {TOKEN_SYMBOL}/{TOKEN_NETWORK} order book <em className='ti ti-arrow-right'></em></a>\n                          <div className='gaps-3x'></div>\n                        </div> }\n\n                      { selectedOrder && !selectedOrder.isSync && !selectedOrder.data.active &&\n                        <div>\n                          <div className='card-head'>\n                          <h4 className='card-title'>Trade History</h4>\n                          </div>\n                        </div> }\n                    </div>\n                  }\n                </div>\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedOrder: state.exchange.selectedOrder,\n    network: state.network,\n    isConnected: state.network.isConnected,\n    web3: state.network.web3,\n    networkName: state.network.networkName,\n    activeAccountAddress: state.network.activeAccountAddress,\n  }\n}\n\nconst mapActionCreators = {\n  connectNetwork,\n  fetchOrder,\n  isOrderActive,\n  calculateFees,\n  calculateFeesToken,\n  remainingAmount,\n  tradeMiningAmount,\n  getBuyTokenAmount,\n  executeOrder,\n  registerToken,\n  checkCoinAllowance\n}\n\nexport default connect(mapStateToProps, mapActionCreators)(ExecuteOrderModal)\n","import { BigNumber } from 'bignumber.js'\n\nimport { EXCHANGE_CONTRACT_ABI } from '../config'\n\nexport function remainingAmount (exchangeContractAddress, orderId) {\n  return async function(dispatch, getState) {\n    return new Promise(resolve => {\n\n      const web3 = getState().network.web3\n      const activeAccountAddress = getState().network.activeAccountAddress\n\n      if (web3 && activeAccountAddress) {\n        const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(exchangeContractAddress)\n\n        exchangeContract.remainingAmount.call(orderId, (error, amount) => {\n          if (!error) {\n            resolve(Number(amount))\n          }\n        })\n      }\n    })\n  }\n}\n\nexport function isOrderActive (exchangeContractAddress, orderId) {\n  return async function(dispatch, getState) {\n    return new Promise(resolve => {\n\n      const web3 = getState().network.web3\n      const activeAccountAddress = getState().network.activeAccountAddress\n\n      if (web3 && activeAccountAddress) {\n        const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(exchangeContractAddress)\n\n        exchangeContract.isOrderActive.call(orderId, (error, result) => {\n          if (!error) {\n            resolve(result)\n          }\n        })\n      }\n    })\n  }\n}\n\nexport function calculateFees (exchangeContractAddress, amount, orderId) {\n  return async function(dispatch, getState) {\n    return new Promise(resolve => {\n      const web3 = getState().network.web3\n      const activeAccountAddress = getState().network.activeAccountAddress\n\n      if (web3 && activeAccountAddress) {\n        const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(exchangeContractAddress)\n\n        let amountToWei = web3.toWei(amount.toString())\n\n        exchangeContract.calcFees.call(amountToWei, orderId, (error, result) => {\n          if (!error) {\n            resolve(Number(result))\n          }\n        })\n      }\n    })\n  }\n}\n\nexport function calculateFeesToken (exchangeContractAddress, amount, tokenDecimals, orderId) {\n  return async function(dispatch, getState) {\n    return new Promise(resolve => {\n\n      const web3 = getState().network.web3\n      const activeAccountAddress = getState().network.activeAccountAddress\n\n      if (web3 && activeAccountAddress) {\n        const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(exchangeContractAddress)\n\n        exchangeContract.calcFees.call(amount * 10 ** tokenDecimals, orderId, (error, result) => {\n          if (!error) {\n            resolve(Number(result))\n          }\n        })\n      }\n    })\n  }\n}\n\nexport function getBuyTokenAmount (exchangeContractAddress, amount, orderId) {\n  return async function(dispatch, getState) {\n    return new Promise(resolve => {\n      const web3 = getState().network.web3\n\n      if (web3) {\n        const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(exchangeContractAddress)\n\n        exchangeContract.getBuyTokenAmount.call(amount, orderId, (error, result) => {\n          if (!error) {\n            resolve(result)\n          }\n        })\n      }\n    })\n  }\n}\n\nexport function tradeMiningAmount(exchangeContractAddress, fees, orderId) {\n  return async function(dispatch, getState) {\n    return new Promise(resolve => {\n\n      const web3 = getState().network.web3\n      const activeAccountAddress = getState().network.activeAccountAddress\n\n      if (web3 && activeAccountAddress) {\n        const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(exchangeContractAddress)\n\n        exchangeContract.tradeMiningAmount.call(fees, orderId, (error, result) => {\n          if (!error) {\n\n            const miningAmount = new BigNumber(result.toString())\n            const decimals = new BigNumber((10**4).toString())\n\n            resolve(miningAmount.div(decimals))\n          }\n        })\n      }\n    })\n  }\n}\n","import React, { Component } from 'react'\nimport BootstrapTable from 'react-bootstrap-table-next'\nimport paginationFactory, { PaginationProvider,\n                            PaginationTotalStandalone,\n                            PaginationListStandalone } from 'react-bootstrap-table2-paginator'\n\nimport { handleTotalAmount } from '../../utils/Helpers'\nimport { TOKEN_LOGO, TOKEN_NAME, TOKEN_NETWORK, BLOCKCHAIN_LOGO } from '../../config'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport ExecuteOrderModal from './ExecuteOrderModal'\nimport NumberFormat from 'react-number-format'\n\nlet numbro = require('numbro')\n\nclass Table extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      selectedOrder: null\n    }\n  }\n\n  async signCancelOrderTransaction (blockchain, contract, orderId) {\n    await this.props.cancelOrder(contract, orderId)\n  }\n\n  render() {\n    let activeAccountAddress = this.props.activeAccountAddress\n    let tableType            = this.props.tableType\n    let ordersData           = this.props.ordersData\n    let networkName          = this.props.networkName\n\n    const customTotal = (from, to, size) => (\n      <span className='pagination-info'>\n        { from } - { to } of { size } orders\n      </span>\n    )\n\n    const columns = [\n      {\n        dataField: 'transaction',\n        text: 'transaction',\n        hidden: true,\n        formatter: (cellContent, row) => {\n          return (\n            cellContent\n          )\n        }\n      },\n      {\n        dataField: 'token_amount',\n        text: 'Token Amount',\n        sort: true,\n        isDummyField: true,\n        formatter: (cellContent, row) => {\n          return (\n            <div>\n              { tableType === 'sell-orders' && <button className='link-button' onClick={() => this.setState({ selectedOrder: row.transaction })} data-toggle='modal' data-target='#modal-sell-orders'>{TOKEN_LOGO && <img alt={TOKEN_NAME} src={`${TOKEN_LOGO}`} height='20' width='20' />} { numbro(row.balance).format({ thousandSeparated: true, trimMantissa: true, mantissa: 4 }) }</button> }\n              { tableType === 'buy-orders' && <button className='link-button' onClick={() => this.setState({ selectedOrder: row.transaction })} data-toggle='modal' data-target='#modal-buy-orders'>{TOKEN_LOGO && <img alt={TOKEN_NAME} src={`${TOKEN_LOGO}`} height='20' width='20' />} { numbro(row.balance).format({ thousandSeparated: true, trimMantissa: true, mantissa: 4 }) }</button> }\n            </div>\n          )\n        },\n        sortFunc: (a, b, order, dataField, rowA, rowB) => {\n          if (order === 'desc') {\n            return numbro(rowB.balance).value() - numbro(rowA.balance).value()\n          }\n          return numbro(rowA.balance).value() - numbro(rowB.balance).value()\n        },\n      },\n      {\n        dataField: 'price_per_token',\n        text: 'Price Per Token',\n        sort: true,\n        isDummyField: true,\n        formatter: (cellContent, row) => {\n          return (\n            <div>\n              { tableType === 'sell-orders' && <button className='link-button' onClick={() => this.setState({ selectedOrder: row.transaction })} data-toggle='modal' data-target='#modal-sell-orders'><img alt={TOKEN_NETWORK} src={`${BLOCKCHAIN_LOGO}`} height='20' width='20' />\n                <NumberFormat value={row.price} displayType={'text'} thousandSeparator={true} fixedDecimalScale={false} decimalScale={18} /></button>\n              }\n              { tableType === 'buy-orders' && <button className='link-button' onClick={() => this.setState({ selectedOrder: row.transaction })} data-toggle='modal' data-target='#modal-buy-orders'><img alt={TOKEN_NETWORK} src={`${BLOCKCHAIN_LOGO}`} height='20' width='20' />\n                <NumberFormat value={row.price} displayType={'text'} thousandSeparator={true} fixedDecimalScale={false} decimalScale={18} /></button>\n              }\n            </div>\n          )\n        },\n        sortFunc: (a, b, order, dataField, rowA, rowB) => {\n          if (order === 'desc') {\n            return numbro(rowB.price).value() - numbro(rowA.price).value()\n          }\n          return numbro(rowA.price).value() - numbro(rowB.price).value()\n        },\n      },\n      {\n        dataField: 'total_price',\n        text: 'Total Price',\n        sort: true,\n        isDummyField: true,\n        formatter: (cellContent, row) => {\n          return (\n            <div>\n              { tableType === 'sell-orders' && <button className='link-button' onClick={() => this.setState({ selectedOrder: row.transaction })} data-toggle='modal' data-target='#modal-sell-orders'><img alt={TOKEN_NETWORK} src={`${BLOCKCHAIN_LOGO}`} height='20' width='20' /> {numbro(handleTotalAmount(row.price, row.balance)).format({ thousandSeparated: true, trimMantissa: true, mantissa: 6 })}</button> }\n              { tableType === 'buy-orders' && <button className='link-button' onClick={() => this.setState({ selectedOrder: row.transaction })} data-toggle='modal' data-target='#modal-buy-orders'><img alt={TOKEN_NETWORK} src={`${BLOCKCHAIN_LOGO}`} height='20' width='20' /> {numbro(handleTotalAmount(row.price, row.balance)).format({ thousandSeparated: true, trimMantissa: true, mantissa: 6 })}</button> }\n            </div>\n          )\n        },\n        sortFunc: (a, b, order, dataField, rowA, rowB) => {\n          if (order === 'desc') {\n            return numbro(handleTotalAmount(rowB.price, rowB.balance)).value() - numbro(handleTotalAmount(rowA.price, rowA.balance)).value()\n          }\n          return numbro(handleTotalAmount(rowA.price, rowA.balance)).value() - numbro(handleTotalAmount(rowB.price, rowB.balance)).value()\n        },\n      },\n      {\n        dataField: 'order_action',\n        text: '',\n        isDummyField: true,\n        sort: false,\n        formatter: (cellContent, row) => {\n          return (\n            <div>\n              <button onClick={(e) => { this.setState({ selectedOrder: row.transaction })}} data-toggle='modal' data-target={tableType === 'sell-orders' ? '#modal-sell-orders' : '#modal-buy-orders'} className={tableType === 'sell-orders' ? 'badge badge-success' : 'badge badge-danger'}><span>{ tableType === 'sell-orders' ? \"BUY\" : \"SELL\"}</span></button>\n              { (((networkName === 'classic' && row.blockchain === 'ETC') || (networkName === 'mainnet' && row.blockchain === 'ETH') ) && (row.owner === activeAccountAddress)) && <button onClick={(e) => { e.preventDefault(); this.signCancelOrderTransaction(row.blockchain, row.contract, row.order_id) }} className='badge badge-info ml-10'><span>CANCEL</span></button> }\n            </div>\n          )\n        },\n      },\n    ]\n\n    const defaultSorted = [{\n      dataField: 'price_per_token', // if dataField is not match to any column you defined, it will be ignored.\n      order: tableType === 'buy-orders' ? 'desc' : 'asc'\n    }]\n\n    return (\n      <div>\n        <PaginationProvider pagination={\n            paginationFactory({custom: true,\n                               sizePerPage: 10,\n                               totalSize: ordersData.length,\n                               paginationTotalRenderer: customTotal})}>\n            {\n              ({\n                paginationProps,\n                paginationTableProps\n              }) => (\n                <div>\n                  <div className='responsive-table-overflow-md'>\n                    <BootstrapTable\n                      keyField='transaction'\n                      data={ordersData}\n                      columns={columns}\n                      classes={`${tableType}`}\n                      defaultSorted={ defaultSorted }\n                      striped\n                      hover\n                      noDataIndication='There is no data to display'\n                      {...paginationTableProps } />\n                  </div>\n\n                  <div className='row align-items-center justify-content-center'>\n                    <div className='col-sm-6 text-left pdt-2x'>\n                      <PaginationListStandalone { ...paginationProps } />\n                    </div>\n\n                    <div className='col-sm-6 text-sm-right pagination-table-dark pdt-2x'>\n                      <PaginationTotalStandalone { ...paginationProps } />\n                    </div>\n                  </div>\n                </div>\n              )\n            }\n          </PaginationProvider>\n\n        <div className='modal fade' id={tableType === 'sell-orders' ? 'modal-sell-orders' : 'modal-buy-orders'} tabIndex='-1'>\n          <div className='modal-dialog modal-dialog-lg modal-dialog-centered'>\n            <div className='modal-content'>\n              <button className='link-button modal-close' onClick={() => { this.setState({ selectedOrder: null })} } data-dismiss='modal' aria-label='Close'><FontAwesomeIcon className='ti' icon={faTimes} size='lg' /></button>\n                <div className='popup-body'>\n                  { this.state.selectedOrder && <ExecuteOrderModal txHash={this.state.selectedOrder} /> }\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Table\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Row, Col } from 'reactstrap'\nimport CreateOrderModal from './Orderbook/CreateOrderModal'\nimport Table from './Orderbook/Table'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes, faPlusSquare } from '@fortawesome/free-solid-svg-icons'\nimport { fetchOrders, cancelOrder } from '../actions'\nimport { TOKEN_SYMBOL, TOKEN_ADDRESS, TOKEN_NETWORK } from '../config'\n\nclass OrderBook extends Component {\n  componentDidMount() {\n    this.fetchOrders()\n    this.fetchOrderBookdData = setInterval(this.fetchOrders.bind(this), 15000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchOrderBookdData)\n  }\n\n  fetchOrders() {\n    this.props.fetchOrders(TOKEN_NETWORK, TOKEN_ADDRESS)\n  }\n\n  render() {\n    let activeAccountAddress = this.props.activeAccountAddress\n    let ordersData           = this.props.orders[`${TOKEN_ADDRESS}`]\n    let networkName          = this.props.networkName\n\n    let sellOrdersData = []\n    let buyOrdersData = []\n\n    if (ordersData && !ordersData.data.isSync) {\n      if (ordersData.data.buys && ordersData.data.buys.length > 0) {\n        buyOrdersData = buyOrdersData.concat(ordersData.data.buys)\n      }\n\n      if (ordersData.data.sells && ordersData.data.sells.length > 0) {\n        sellOrdersData = sellOrdersData.concat(ordersData.data.sells)\n      }\n    }\n\n    return (\n      <Row className='mt-5'>\n        <Col md='12' lg='6'>\n          <div className='content-area card'>\n            <div className='card-innr'>\n             <div className='card-head has-aside'>\n                <h4 className='card-title'>Buy {TOKEN_SYMBOL}</h4>\n\n                <div className='card-opt'>\n                  <button className='link-button link ucap' data-toggle='modal' data-target='#modal-create-order'>Create Order <FontAwesomeIcon className='ml-10' icon={faPlusSquare} size='lg' /></button>\n                </div>\n              </div>\n\n              { (buyOrdersData.length > 0) && <Table\n                cancelOrder={this.props.cancelOrder}\n                networkName={networkName}\n                ordersData={buyOrdersData}\n                activeAccountAddress={activeAccountAddress}\n                tableType={'sell-orders'}\n              /> }\n            </div>\n          </div>\n        </Col>\n\n        <Col md='12' lg='6'>\n          <div className='content-area card'>\n              <div className='card-innr'>\n              <div className='card-head has-aside'>\n                  <h4 className='card-title'>Sell {TOKEN_SYMBOL}</h4>\n\n                  <div className='card-opt'>\n                    <button className='link-button link ucap' data-toggle='modal' data-target='#modal-create-order'>Create Order <FontAwesomeIcon className='ml-10' icon={faPlusSquare} size='lg' /></button>\n                  </div>\n                </div>\n\n                { (sellOrdersData.length > 0) && <Table\n                  cancelOrder={this.props.cancelOrder}\n                  networkName={networkName}\n                  ordersData={sellOrdersData}\n                  activeAccountAddress={activeAccountAddress}\n                  tableType={'buy-orders'}\n                /> }\n              </div>\n            </div>\n          </Col>\n\n          <div className='modal fade' id={'modal-create-order'} tabIndex='-1'>\n            <div className='modal-dialog modal-dialog-lg modal-dialog-centered'>\n              <div className='modal-content'>\n                  <button className='link-button modal-close' data-dismiss='modal' aria-label='Close'><FontAwesomeIcon className='ti' icon={faTimes} size='lg' /></button>\n                  <div className='popup-body'>\n                    <CreateOrderModal />\n                  </div>\n              </div>\n            </div>\n          </div>\n      </Row>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    activeAccountAddress: state.network.activeAccountAddress,\n    orders: state.orderBook.orders,\n    networkName: state.network.networkName\n  }\n}\n\nconst mapActionCreators = {\n  fetchOrders,\n  cancelOrder\n}\n\nexport default connect(mapStateToProps, mapActionCreators)(OrderBook)\n\n","import Notifications from 'react-notification-system-redux'\nimport { EXCHANGE_CONTRACT_ABI } from '../config'\n\nexport function cancelOrder (orderContract, orderId) {\n    return async function(dispatch, getState) {\n      const web3 = getState().network.web3\n\n      if (web3) {\n        const exchangeContract = web3.eth.contract(EXCHANGE_CONTRACT_ABI).at(orderContract)\n        const activeAccountAddress = getState().network.activeAccountAddress\n\n        const notificationAction = Notifications.show({\n          title: 'Cancel Order',\n          message: 'Please submit transaction',\n          level: 'info',\n          position: 'tr',\n          autoDismiss: 10,\n          dismissible: true\n        }, 'info')\n\n        dispatch(notificationAction)\n\n        exchangeContract.cancelOrder.estimateGas(orderId, { from: activeAccountAddress }, function (error, gasAmount) {\n          if (gasAmount) {\n\n            exchangeContract.cancelOrder.sendTransaction(orderId, { from: activeAccountAddress, gas: gasAmount }, function(error, transaction) {\n              if (transaction) {\n                let notificationAction = Notifications.show({\n                  title: 'Cancel Order',\n                  message: 'Your transaction has been submitted',\n                  level: 'success',\n                  position: 'tr',\n                  autoDismiss: 10,\n                  dismissible: true\n                }, 'success')\n\n                dispatch(notificationAction)\n              }\n\n              if (error) {\n                let notificationAction = Notifications.show({\n                  title: 'Cancel Order',\n                  message: error.message,\n                  level: 'error',\n                  position: 'tr',\n                  autoDismiss: 10,\n                  dismissible: true\n                }, 'error')\n\n                dispatch(notificationAction)\n              }\n            })\n          }\n        })\n      }\n    }\n  }\n","import React from 'react'\nimport hashicon from 'hashicon'\n\nclass Hashicon extends React.Component {\n  componentDidMount(){\n    let {hash, size} = this.props\n    let canvasContainer = this.refs['canvasHashicon ' + this.props.className]\n\n    canvasContainer.appendChild(hashicon(hash, size))\n  }\n\n  render(){\n    return (\n      <div style={{...this.props.style}} className={'identicon ' + this.props.className}>\n        <div ref={`canvasHashicon ${this.props.className}`}></div>\n      </div>\n    )\n  }\n}\n\nexport default Hashicon","import React, { Component } from 'react'\nimport moment from 'moment'\nimport { handleExplorerForTx, handleExplorerForAddress } from '../../utils/Helpers'\nimport Hashicon from '../Shared/Hashicon'\nimport BootstrapTable from 'react-bootstrap-table-next'\nimport paginationFactory, { PaginationProvider,\n                            PaginationTotalStandalone,\n                            PaginationListStandalone } from 'react-bootstrap-table2-paginator'\nimport NumberFormat from 'react-number-format'\n\nimport { TOKEN_NETWORK, TOKEN_LOGO, BLOCKCHAIN_LOGO, TOKEN_NAME } from '../../config'\n\nlet numbro = require('numbro')\n\nclass Table extends Component {\n\n  render () {\n    let tradesData = this.props.tradesData.sort(function (a,b) { return b.created_at - a.created_at })\n\n    const customTotal = (from, to, size) => (\n      <span className='pagination-info'>\n        {from} - {to} of {size} trades\n      </span>\n    )\n\n    const columns = [\n      {\n        dataField: 'created_at',\n        text: 'Date (DD/MM)',\n        isDummyField: true,\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        formatter: (cellContent, row) => {\n          return (\n            <span className='lead created-at'>{moment.unix(row.created_at).format('DD/MM, HH:mm').toString()}</span>\n          )\n        }\n      },\n      {\n        dataField: 'transaction',\n        text: 'Tx Hash',\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        formatter: (cellContent, row) => {\n          return (\n            <span className='lead transaction-hash'><a href={handleExplorerForTx(TOKEN_NETWORK, row.transaction)} target='_blank' rel='noopener noreferrer'><Hashicon hash={row.transaction} size={30} className={`${row.transaction}`} /></a></span>\n          )\n        }\n      },\n      {\n        dataField: 'order_type',\n        text: 'Tx Type',\n        isDummyField: true,\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        formatter: (cellContent, row) => {\n          if (row.order_type === 'SELL') {\n            return (\n              <span className='badge badge-success table-mobile-td-order'>BUY</span>\n            )\n          } else {\n            return (\n              <span className='badge badge-danger table-mobile-td-order'>SELL</span>\n            )\n          }\n        }\n      },\n      {\n        dataField: 'buyer',\n        text: 'Buyer',\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        isDummyField: true,\n\n        formatter: (cellContent, row) => {\n          return (\n            <div>\n              {row.order_type === 'SELL' && <span className='lead transaction-hash'><a href={handleExplorerForAddress(TOKEN_NETWORK, row.buyer)} target='_blank' rel='noopener noreferrer'><Hashicon hash={row.buyer} className={`${row.buyer}`} size={30} /></a></span>}\n              {row.order_type === 'BUY' && <span className='lead transaction-hash'><a href={handleExplorerForAddress(TOKEN_NETWORK, row.seller)} target='_blank' rel='noopener noreferrer'><Hashicon hash={row.seller} className={`${row.seller}`} size={30} /></a></span>}\n            </div>\n          )\n        }\n      },\n      {\n        dataField: 'seller',\n        text: 'Seller',\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        isDummyField: true,\n\n        formatter: (cellContent, row) => {\n          return (\n            <div>\n               { row.order_type === 'SELL' && <span className='lead transaction-hash'><a href={handleExplorerForAddress(TOKEN_NETWORK, row.seller)} target='_blank' rel='noopener noreferrer'><Hashicon hash={row.seller} className={`${row.seller}`} size={30} /></a></span> }\n               { row.order_type === 'BUY' && <span className='lead transaction-hash'><a href={handleExplorerForAddress(TOKEN_NETWORK, row.buyer)} target='_blank' rel='noopener noreferrer'><Hashicon hash={row.buyer} className={`${row.buyer}`}  size={30} /></a></span> }\n            </div>\n          )\n        }\n      },\n      {\n        dataField: 'token_amount',\n        text: 'Token Amount',\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        isDummyField: true,\n\n        formatter: (cellContent, row) => {\n          return (\n            <div>\n               { row.order_type === 'BUY' && <span className='lead token-amount table-mobile-td'>{TOKEN_LOGO && <img src={TOKEN_LOGO} alt={TOKEN_NAME} height='30' width='30' />} { numbro(row.buytokenamount).format('0,0[.]0000') === 'NaN' ? '> 0' : numbro(row.buytokenamount).format({ thousandSeparated: true, trimMantissa: true, mantissa: 4 }) }</span> }\n               { row.order_type === 'SELL' && <span className='lead token-amount table-mobile-td'>{TOKEN_LOGO && <img src={TOKEN_LOGO} alt={TOKEN_NAME} height='30' width='30' />} { numbro(row.selltokenamount).format('0,0[.]0000') === 'NaN' ? '> 0' : numbro(row.selltokenamount).format({ thousandSeparated: true, trimMantissa: true, mantissa: 4 }) }</span> }\n            </div>\n          )\n        }\n      },\n      {\n        dataField: 'price_per_token',\n        text: 'Price Per Token',\n        isDummyField: true,\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        formatter: (cellContent, row) => {\n          return (\n            <span className='lead token-price table-mobile-td'><img src={`${BLOCKCHAIN_LOGO}`} alt={row.blockchain} height='30' width='30' />\n              <NumberFormat value={row.price} displayType={'text'} thousandSeparator={true} fixedDecimalScale={false} decimalScale={18} />\n            </span>\n          )\n        }\n      },\n      {\n        dataField: 'total_price',\n        text: 'Total Price',\n        isDummyField: true,\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        formatter: (cellContent, row) => {\n          return (\n            <div>\n              { row.order_type === 'BUY' && <span className='lead ethereum-amount table-mobile-td'><img src={`${BLOCKCHAIN_LOGO}`} alt={row.blockchain} height='30' width='30' /> { numbro(row.selltokenamount).format('0,0[.]000000') === 'NaN' ? '> 0' : numbro(row.selltokenamount).format({ thousandSeparated: true, trimMantissa: true, mantissa: 6 }) }</span> }\n              { row.order_type === 'SELL' && <span className='lead ethereum-amount table-mobile-td'><img src={`${BLOCKCHAIN_LOGO}`} alt={row.blockchain} height='30' width='30' /> { numbro(row.buytokenamount).format('0,0[.]000000') === 'NaN' ? '> 0' : numbro(row.buytokenamount).format({ thousandSeparated: true, trimMantissa: true, mantissa: 6 }) }</span> }\n            </div>\n          )\n        }\n      },\n    ]\n\n    return (\n      <div className='pdt-1x'>\n        <PaginationProvider pagination={\n            paginationFactory({ custom: true,\n                               totalSize: tradesData.length,\n                               paginationTotalRenderer: customTotal })}>\n            {\n              ({\n                paginationProps,\n                paginationTableProps\n              }) => (\n                <div>\n                  <div className='responsive-table-overflow-lg'>\n                    <BootstrapTable\n                      keyField='transaction'\n                      data={tradesData}\n                      columns={columns}\n                      classes='table-dark trades-history'\n                      headerClasses='data-item data-head'\n                      noDataIndication='There is no data to display'\n                      bordered={ false }\n                      {...paginationTableProps} />\n                  </div>\n\n                  <div className='row align-items-center justify-content-center'>\n                    <div className='col-sm-6 text-left pdt-2x'>\n                      <PaginationListStandalone {...paginationProps} />\n                    </div>\n\n                    <div className='col-sm-6 text-sm-right pagination-table-dark pdt-2x'>\n                      <PaginationTotalStandalone {...paginationProps} />\n                    </div>\n                  </div>\n                </div>\n              )\n            }\n          </PaginationProvider>\n       </div>\n\n    )\n  }\n}\n\nexport default Table\n","import React, { Component } from 'react'\nimport Table from './Trades/Table'\nimport { connect } from 'react-redux'\n\nimport { Col } from 'reactstrap'\nimport { TOKEN_ADDRESS, TOKEN_NETWORK } from '../config'\nimport { fetchTrades } from '../actions'\n\n\nclass Trades extends Component {\n  componentDidMount() {\n    this.fetchTrades()\n    this.fetchTradesData = setInterval(this.fetchTrades.bind(this), 15000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchTradesData)\n  }\n\n  fetchTrades() {\n    this.props.fetchTrades(TOKEN_NETWORK, TOKEN_ADDRESS)\n  }\n\n  render() {\n    let leaderboardEnabled = this.props.leaderboardEnabled\n    let tradesData = this.props.trades[`${TOKEN_ADDRESS}`]\n\n    let combinedTradesData = []\n\n    if (tradesData && !tradesData.data.isSync) {\n      if (tradesData.data.buys && tradesData.data.buys.length > 0) {\n        combinedTradesData = combinedTradesData.concat(tradesData.data.buys)\n      }\n\n      if (tradesData.data.sells && tradesData.data.sells.length > 0) {\n        combinedTradesData = combinedTradesData.concat(tradesData.data.sells)\n      }\n    }\n\n    return (\n      <Col md='12' lg={leaderboardEnabled ? '9' : '12'}>\n        <div className='content-area card card-text-light card-secondary'>\n          <div className='card-innr'>\n            <div className='card-head'>\n                <h4 className='card-title'>Trade History</h4>\n            </div>\n            { (combinedTradesData.length > 0) && <Table tradesData={combinedTradesData} /> }\n          </div>\n        </div>\n      </Col>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    trades: state.orderBook.trades,\n  }\n}\n\nconst mapActionCreators = {\n  fetchTrades\n}\n\nexport default connect(mapStateToProps, mapActionCreators)(Trades)\n\n","import React, { Component } from 'react'\nimport { handleExplorerForAddress } from '../../utils/Helpers'\nimport Hashicon from '../Shared/Hashicon'\nimport BootstrapTable from 'react-bootstrap-table-next'\nimport paginationFactory, { PaginationProvider,\n                            PaginationListStandalone } from 'react-bootstrap-table2-paginator'\nimport { TRADING_COMPETITION_STRATEGY, TOKEN_NETWORK, BLOCKCHAIN_LOGO, TRADE_MINING_REWARD_LOGO, TRADE_MINING_REWARD_SYMBOL } from '../../config'\n\nlet numbro = require('numbro')\n\nclass Table extends Component {\n  render () {\n    let leaderboardData\n\n    switch(TRADING_COMPETITION_STRATEGY) {\n      case 'bought':\n        leaderboardData = this.props.leaderboardData.buyers\n        break\n      case 'sold':\n        leaderboardData = this.props.leaderboardData.sellers\n        break\n      case 'mined':\n        leaderboardData = this.props.leaderboardData.trademiners\n        break\n      default:\n        leaderboardData = this.props.leaderboardData.trademiners\n        break\n    }\n\n    let columns = [\n      {\n        dataField: 'address',\n        text: 'Trader',\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        formatter: (cellContent, row) => {\n          return (\n            <span className='lead'><a href={handleExplorerForAddress(TOKEN_NETWORK, cellContent)} target='_blank' rel='noopener noreferrer'><Hashicon hash={cellContent} className={`${cellContent}`} size={30} /></a></span>\n          )\n        }\n      }\n    ]\n\n    if (TRADING_COMPETITION_STRATEGY === 'mined') {\n      columns.push({\n        dataField: 'mining_amount',\n        text: 'Trade Mined',\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        formatter: (cellContent, row) => {\n          return (\n            <span className='lead'><img src={`${TRADE_MINING_REWARD_LOGO}`} alt={TRADE_MINING_REWARD_SYMBOL} height='30' width='30' /> { numbro(cellContent).format({ thousandSeparated: true, trimMantissa: true, mantissa: 4 }) }</span>\n          )\n        }\n      })\n    } else {\n      columns.push({\n        dataField: 'ether_amount',\n        text: 'Volume',\n        classes: 'data-col',\n        headerClasses: 'data-col',\n        formatter: (cellContent, row) => {\n          return (\n            <span className='lead transaction-hash'><img src={`${BLOCKCHAIN_LOGO}`} alt={TOKEN_NETWORK} height='30' width='30' /> { numbro(cellContent).format({ thousandSeparated: true, trimMantissa: true, mantissa: 8 }) }</span>\n          )\n        }\n      })\n    }\n\n    return (\n      <div className='pdt-1x'>\n        <PaginationProvider pagination={\n            paginationFactory({ custom: true,\n                               totalSize: leaderboardData.length })}>\n            {\n              ({\n                paginationProps,\n                paginationTableProps\n              }) => (\n                <div>\n                  <div className='responsive-table-overflow-lg'>\n                    <BootstrapTable\n                      keyField='address'\n                      data={leaderboardData}\n                      columns={columns}\n                      classes='table-dark leaderboard'\n                      headerClasses='data-item data-head'\n                      noDataIndication='There is no data to display'\n                      bordered={ false }\n                      {...paginationTableProps} />\n                  </div>\n\n                  <div className='row align-items-center justify-content-center'>\n                    <div className='col-12 text-left pdt-2x'>\n                      <PaginationListStandalone {...paginationProps} />\n                    </div>\n                  </div>\n                </div>\n              )\n            }\n          </PaginationProvider>\n       </div>\n    )\n  }\n}\n\nexport default Table\n","import React, { Component } from 'react'\nimport Table from './Leaderboard/Table'\nimport {connect} from 'react-redux'\nimport { Col } from 'reactstrap'\nimport { TOKEN_ADDRESS, TOKEN_NETWORK, TRADING_COMPETITION_START_DATE, TRADING_COMPETITION_END_DATE } from '../config'\nimport { fetchLeaderboard } from '../actions'\n\nclass Leaderboard extends Component {\n  componentDidMount() {\n    this.fetchLeaderboard()\n    this.fetchLeaderboardData = setInterval(this.fetchLeaderboard.bind(this), 15000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchLeaderboardData)\n  }\n\n  fetchLeaderboard() {\n    this.props.fetchLeaderboard(TOKEN_NETWORK, TOKEN_ADDRESS, TRADING_COMPETITION_START_DATE, TRADING_COMPETITION_END_DATE)\n  }\n\n  render() {\n    let leaderboard = this.props.leaderboard\n\n    return (\n      <Col md='12' lg='3'>\n        <div className='content-area card card-text-light card-secondary'>\n          <div className='card-innr'>\n            <div className='card-head'>\n              <h4 className='card-title'>Leaderboard</h4>\n            </div>\n\n            { (leaderboard && !leaderboard.isSync) && <Table leaderboardData={leaderboard.data} /> }\n          </div>\n        </div>\n      </Col>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    leaderboard: state.exchange.leaderboard\n  }\n}\n\nconst mapActionCreators = {\n  fetchLeaderboard\n}\n\nexport default connect(mapStateToProps, mapActionCreators)(Leaderboard)\n","import React, { Component } from 'react'\nimport { Navbar, NavbarBrand, NavLink, Container, Row, Media } from 'reactstrap'\nimport { connect } from 'react-redux'\nimport Notifications from 'react-notification-system-redux';\nimport { connectNetwork } from './actions'\nimport { NAV_BRAND_LOGO } from './config'\nimport OrderBook from './components/OrderBook'\nimport Trades from './components/Trades'\nimport Leaderboard from './components/Leaderboard'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { MAIN_TITLE, MAIN_TEXT, TRADING_COMPETITION_ENABLED } from './config'\n\nclass Fenrir extends Component {\n  componentDidMount() {\n    this.props.connectNetwork()\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar className='bg-default'>\n          <NavbarBrand href='/'>\n            <Media src={NAV_BRAND_LOGO} height={30} alt='Saturn Network Logo' className='d-inline-block align-top' />\n          </NavbarBrand>\n\n          <NavLink href='https://github.com/saturn-network/'><FontAwesomeIcon icon={faGithub} size='lg' color='#fff' /></NavLink>\n        </Navbar>\n\n        <Container>\n          <div className=\"col-xl-12 col-lg-12 col-md-12 text-center mt-5\">\n            <h2 className=\"page-title\">{ MAIN_TITLE }</h2>\n            <p className=\"large\">{ MAIN_TEXT }</p>\n          </div>\n\n          <OrderBook />\n\n          <Row>\n            { TRADING_COMPETITION_ENABLED && <Leaderboard /> }\n            <Trades leaderboardEnabled={TRADING_COMPETITION_ENABLED} />\n          </Row>\n        </Container>\n\n        <Notifications\n          notifications={ this.props.notifications } />\n\n        <div className='footer-bar'>\n          <div className='container'>\n            <div className='row align-items-center justify-content-center'>\n              <p>Powered by <a href='https://www.saturn.network'>Saturn Network</a></p>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    activeAccountAddress: state.network.activeAccountAddress,\n    isConnected: state.network.isConnected,\n    web3: state.network.web3,\n    networkName: state.network.networkName,\n    notifications: state.notifications\n  }\n}\n\nconst mapActionCreators = {\n  connectNetwork\n}\n\nexport default connect(mapStateToProps, mapActionCreators)(Fenrir)\n","import {\n  CONNECT_NETWORK,\n  UPDATE_NETWORK,\n  SET_ACTIVE_ACCOUNT\n} from '../actions'\n\nconst initialState = {\n  activeAccountAddress: undefined,\n  isConnected: false,\n  web3: undefined,\n};\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n\n  case CONNECT_NETWORK:\n    return {\n      ...state,\n      web3: action.payload,\n      isConnected: true\n    }\n\n  case UPDATE_NETWORK:\n    const blockchain = action.payload\n    return {\n      ...state,\n      ...blockchain\n    }\n\n  case SET_ACTIVE_ACCOUNT:\n    if(!state.web3) return state\n\n    return {\n      ...state,\n      activeAccountAddress: action.payload\n    }\n\n  default:\n    return state\n  }\n}\n","import {\n  RESET_ORDER_DETAILS_DATA,\n  UPDATE_ORDER_DETAILS_DATA,\n  UPDATE_LEADERBOARD_DATA\n} from '../actions'\n\nconst initialState = {\n  selectedOrder: { data: undefined, isSync: true},\n  leaderboard: { data: undefined, isSync: true}\n\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n\n  case RESET_ORDER_DETAILS_DATA:\n    return {\n      ...state,\n      selectedOrder: initialState.selectedOrder\n    }\n\n  case UPDATE_ORDER_DETAILS_DATA:\n    return {\n      ...state,\n      selectedOrder: action.payload\n    }\n\n  case UPDATE_LEADERBOARD_DATA:\n    return {\n      ...state,\n      leaderboard: action.payload\n    }\n\n  default:\n    return state;\n  }\n}\n","import {\n  CONNECT_TOKEN_ORDER_BOOK_DATA,\n  UPDATE_TOKEN_ORDER_BOOK_DATA,\n  CONNECT_TOKEN_TRADES_DATA,\n  UPDATE_TOKEN_TRADES_DATA,\n} from '../actions'\n\nconst initialState = {\n  orders: {},\n  trades: {}\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n\n  case CONNECT_TOKEN_ORDER_BOOK_DATA:\n    return {\n      ...state,\n      orders: { ...state.orders, [action.id]: action.payload }\n    }\n\n  case UPDATE_TOKEN_ORDER_BOOK_DATA:\n    return {\n      ...state,\n      orders: { ...state.orders, [action.id]: action.payload },\n    }\n\n  case CONNECT_TOKEN_TRADES_DATA:\n    return {\n      ...state,\n      trades: { ...state.trades, [action.id]: action.payload },\n    }\n\n  case UPDATE_TOKEN_TRADES_DATA:\n    return {\n      ...state,\n      trades: { ...state.trades, [action.id]: action.payload },\n    }\n\n  default:\n    return state;\n  }\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport thunk from 'redux-thunk'\nimport { reducer as notifications } from 'react-notification-system-redux'\n\nimport NetworkReducer from './reducers/NetworkReducer'\nimport ExchangeReducer from './reducers/ExchangeReducer'\nimport OrderBookReducer from './reducers/OrderBookReducer'\n\nconst reducers = combineReducers({\n  network: NetworkReducer,\n  exchange: ExchangeReducer,\n  orderBook: OrderBookReducer,\n  notifications: notifications\n})\n\nconst store = createStore(\n  reducers,\n  applyMiddleware(thunk)\n)\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport Fenrir from './Fenrir'\nimport store from './store'\n\nimport 'bootstrap/dist/js/bootstrap.bundle.min'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './style.scss'\n\nReactDOM.render(\n  <Provider store={store}>\n    <Fenrir />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}